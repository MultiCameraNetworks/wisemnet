//
// Generated file, do not edit! Created by nedtool 5.0 from castalia/src/node/communication/mac/tMac/TMacControlMessage.msg.
//

#ifndef __TMACCONTROLMESSAGE_M_H
#define __TMACCONTROLMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "TMacPacket_m.h"
// }}

/**
 * Enum generated from <tt>castalia/src/node/communication/mac/tMac/TMacControlMessage.msg:7</tt> by nedtool.
 * <pre>
 * enum TmacControlMessage_type
 * {
 * 
 *     TMAC_TX_FAILURE = 1;
 *     TMAC_TX_SUCCESS = 2;
 * }
 * </pre>
 */
enum TmacControlMessage_type {
    TMAC_TX_FAILURE = 1,
    TMAC_TX_SUCCESS = 2
};

/**
 * Class generated from <tt>castalia/src/node/communication/mac/tMac/TMacControlMessage.msg:12</tt> by nedtool.
 * <pre>
 * message TMacControlMessage
 * {
 *     int type @enum(TmacControlMessage_type);
 *     TMacPacket macPacket;
 *     unsigned int maxTxRetries;
 *     unsigned int txRetries;
 * }
 * </pre>
 */
class TMacControlMessage : public ::omnetpp::cMessage
{
  protected:
    int type;
    TMacPacket macPacket;
    unsigned int maxTxRetries;
    unsigned int txRetries;

  private:
    void copy(const TMacControlMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TMacControlMessage&);

  public:
    TMacControlMessage(const char *name=nullptr, int kind=0);
    TMacControlMessage(const TMacControlMessage& other);
    virtual ~TMacControlMessage();
    TMacControlMessage& operator=(const TMacControlMessage& other);
    virtual TMacControlMessage *dup() const {return new TMacControlMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual TMacPacket& getMacPacket();
    virtual const TMacPacket& getMacPacket() const {return const_cast<TMacControlMessage*>(this)->getMacPacket();}
    virtual void setMacPacket(const TMacPacket& macPacket);
    virtual unsigned int getMaxTxRetries() const;
    virtual void setMaxTxRetries(unsigned int maxTxRetries);
    virtual unsigned int getTxRetries() const;
    virtual void setTxRetries(unsigned int txRetries);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TMacControlMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TMacControlMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __TMACCONTROLMESSAGE_M_H

