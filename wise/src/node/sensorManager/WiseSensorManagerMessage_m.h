//
// Generated file, do not edit! Created by nedtool 5.0 from wise/src/node/sensorManager/WiseSensorManagerMessage.msg.
//

#ifndef __WISESENSORMANAGERMESSAGE_M_H
#define __WISESENSORMANAGERMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>wise/src/node/sensorManager/WiseSensorManagerMessage.msg:14</tt> by nedtool.
 * <pre>
 * enum WiseSensorManagerMessageType
 * {
 * 
 *     WISE_SENS_NORMAL = 0;
 *     WISE_SENS_COMMAND = 1;
 * }
 * </pre>
 */
enum WiseSensorManagerMessageType {
    WISE_SENS_NORMAL = 0,
    WISE_SENS_COMMAND = 1
};

/**
 * Class generated from <tt>wise/src/node/sensorManager/WiseSensorManagerMessage.msg:19</tt> by nedtool.
 * <pre>
 * message WiseSensorManagerMessage
 * {
 *     string sensorType;
 *     int sensorIndex;
 *     unsigned int type = WISE_SENS_NORMAL;
 * }
 * </pre>
 */
class WiseSensorManagerMessage : public ::omnetpp::cMessage
{
  protected:
    ::omnetpp::opp_string sensorType;
    int sensorIndex;
    unsigned int type;

  private:
    void copy(const WiseSensorManagerMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WiseSensorManagerMessage&);

  public:
    WiseSensorManagerMessage(const char *name=nullptr, int kind=0);
    WiseSensorManagerMessage(const WiseSensorManagerMessage& other);
    virtual ~WiseSensorManagerMessage();
    WiseSensorManagerMessage& operator=(const WiseSensorManagerMessage& other);
    virtual WiseSensorManagerMessage *dup() const {return new WiseSensorManagerMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSensorType() const;
    virtual void setSensorType(const char * sensorType);
    virtual int getSensorIndex() const;
    virtual void setSensorIndex(int sensorIndex);
    virtual unsigned int getType() const;
    virtual void setType(unsigned int type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WiseSensorManagerMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WiseSensorManagerMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __WISESENSORMANAGERMESSAGE_M_H

