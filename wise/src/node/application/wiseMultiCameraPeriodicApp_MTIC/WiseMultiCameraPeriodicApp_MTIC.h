// *****************************************************************************************
// Copyright (C) 2017 Juan C. SanMiguel and Andrea Cavallaro
// You may use, distribute and modify this code under the terms of the ACADEMIC PUBLIC
// license (see the attached LICENSE_WISE file).
//
// This file is part of the WiseMnet simulator
//
// Updated contact information:
//  - Juan C. SanMiguel - Universidad Autonoma of Madrid - juancarlos.sanmiguel@uam.es
//  - Andrea Cavallaro - Queen Mary University of London - a.cavallaro@qmul.ac.uk
//
// Please cite the following reference when publishing results obtained with WiseMnet:
//   J. SanMiguel & A. Cavallaro,
//   "Networked Computer Vision: the importance of a holistic simulator",
//   IEEE Computer, 50(7):35-43, Jul 2017, http://ieeexplore.ieee.org/document/7971873/
// *****************************************************************************************

/**
 * \file WiseMultiCameraPeriodicApp_MTIC.cc
 * \author Juan C. SanMiguel (2017)
 * \brief Header file for the MTIC tracker
 * \version 1.4
 */
#ifndef __WISEMULTICAMERAPERIODICAPP_MTIC_H__
#define __WISEMULTICAMERAPERIODICAPP_MTIC_H__

#include "WiseCameraPeriodicApp.h"
#include "WiseMultiCameraPeriodicApp_MTICPacket_m.h"
#include "WiseMultiCameraPeriodicApp_MTIC_utils.h" //include specific-structures for single-target tracking using ICF (in 'icf' namespace)
#include "mvtnorm.h"

/*! \class WiseMultiCameraPeriodicApp_MTIC
 *  \brief This class implements distributed multi-target tracking based on Information Consensus Filter (MTIC)
 *
 *  The MTIC algorithm is robust to false measurements and limited resources like power, bandwidth and the real-time
 *  operational requirements. It performs data association based on the JPDAF filter and then, Information-based Consensus
 *  Filter for each associated target.
 *
 *  The MTIC algorithm is initialized by using ground-truth so needs to know the number of targets beforehand
 *
 *  The MTIC algorithm has been modified to be used in the network. Control structures have been included and network
 *  termination protocols have been added - see function at_end_sample()
 *
 *  Reference:
 *  A. T. Kamal, J. H. Bappy, J. A. Farrell and A. K. Roy-Chowdhury,
 *  "Distributed Multi-Target Tracking and Data Association in Vision Networks,"
 *  in IEEE Transactions on Pattern Analysis and Machine Intelligence, 38(7):1397-1410, July 1 2016.
 *  doi: 10.1109/TPAMI.2015.2484339  http://ieeexplore.ieee.org/document/7286852/
 */
class WiseMultiCameraPeriodicApp_MTIC : public WiseCameraPeriodicApp
{

private:
    int _tracking_step_counter;  //!< internal counter for tracking steps

    unsigned int _dimS; //!< Dimension of the state vector
    unsigned int _dimM; //!< Dimension of the measurement vector

    //Target management
    std::vector<cv::Mat> _zlist; //list containing measurements and clutter
    std::vector<cv::Mat> _zclut; //list containing only clutter

    int _n_targets;       //!< Number of targets being tracked by the node
    int _max_neigb_network; //!< Maximum number of neighbors in the network (connectivity degree)

    //ICF filters for all targets (prior/posterior state & covariance, transition/measurement matrices,...)
    std::vector<mtic::MTIC_t> _ICFs;//!< List of ICFs for each target
    float _procNoiseCov;            //!< Common process noise covariance (input in .ned)
    float _measNoiseCov;            //!< Common measurement noise covariance (input in .ned)

    //Consensus variables (generic for all targets)
    double _alpha;              //!< Rate of adaptation of the consensus (input in .ned)
    unsigned long _iter_max;    //!< Maximum number of iterations to be done (input in .ned)
    string _share;              //!< Type of neighbors to exchange data ("FOV" or "COM")

    //Association MTT variables
    double _lambda; //!< clutter per camera sensor (high value --> more clutter measures)
    int _countClutters;

    //Buffers
    std::vector<std::vector<mtic::round_data_t>>_rdata; //!< Structure to save own data for each round of the consensus
    std::vector<mtic::node_ctrl_mtic_t> _node_controls; //!< Structure to save data received from other nodes
    std::vector<mtic::mtic_state_t> _camStatus;  //!< Status of neighbor cameras during the consensus iterations

    bool _collectNetworkStats;      //!< FLAG to collect and log network statistics
    bool _collectPowerStats;        //!< FLAG to collect and log power consumption statistics
    bool _collectAccuracyStats;     //!< FLAG to collect and log accuracy statistics
    bool _displayStats;             //!< FLAG to show data during runtime

protected:
    //Functions to be defined in sub-classes (mandatory)
    void at_timer_fired(int index);  //!< Response to alarms generated by specific algorithm. To define in superclass (mandatory)
    void at_startup();                 //!< Initialize internal variables. To define in sub-classes for each specific algorithm (mandatory)
    void at_finishSpecific();           //!< Release resources. To define in sub-classes for each specific algorithm (mandatory)
    bool at_init();                     //!< Initialize resources based on sampled data. To define in sub-classes for each specific algorithm (mandatory)
    bool at_sample();                   //!< Operations for processing each sample. To define in sub-classes for each specific algorithm (mandatory)
    bool at_end_sample();               //!< Operations after processing each sample. To define in sub-classes for each specific algorithm (mandatory)
    void make_measurements(const std::vector<WiseTargetDetection>&); //!< Conversion of camera detections into ordered lists of measurements for tracking. To define in sub-classes for each specific algorithm (mandatory)
    bool process_network_message(WiseBaseAppPacket *m); //!< Operations for processing each packet from network. To define in sub-classes for each specific algorithm (mandatory)
    void handleDirectApplicationMessage(WiseBaseAppPacket *); //!< Process a received packet from a direct node-to-node links (to be implemented in superclasses of WiseBaseApp)

    bool at_first_sample();        //!< Operations at 1st example.
    bool at_end_first_sample();   //!< Operations at the end of 1st example.
    bool displayStats();            //!< Display visual data while the simulation is running

private:
    void readParameters();
    void initStructures();         //!< Initialization of internal variables&structures.
    int sendICFmessage(int tid);   //!< Send a message to neigbourgs to perfom consensus.
    void logResult(int tid);       //!< Write results in a logfile

    void consensusStart(int tid);           //!< Prepare the data and start the consensus
    void consensusProcess(int tid, int k);         //!< Process each round of the consensus
    void checkNextConsensusRound(int tid, int k);  //!< Check availability of data for next consensus round

    void generateClutterMeasurements();     //!< Function to generate clutter measurements

    void dataAssociation();                 //!< Function to associate targets to measurements (Real & clutter)
    double findPd(cv::Mat a, cv::Mat b, WiseCameraInfo::fov_di_t &fov); //!< Computation of "probability of detection" for each target within the FOV of a camera
};

#endif // __WISEMULTICAMERAPERIODICAPP_MTIC_H__
