// *****************************************************************************
//  Copyright (C): Juan C. SanMiguel, 2015
//  Author(s): Juan C. SanMiguel
//
//  Developed at Queen Mary University of London (UK) & University Autonoma of Madrid (Spain)
//  This file is distributed under the terms in the attached LICENSE_2 file.
//
//  This file is part of the implementation for the ICF tracker for single targets described in:
//      Kamal et al, "Information Weighted Consensus Filters and Their Application
//      in Distributed Camera Networks", IEEE TAC 2013
//      http://ieeexplore.ieee.org/document/6576197/
//
//  Updated contact information:
//  - Juan C. SanMiguel - Universidad Autonoma of Madrid - juancarlos.sanmiguel@uam.es
//  - Andrea Cavallaro - Queen Mary University of London - a.cavallaro@qmul.ac.uk
//
// *****************************************************************************


#ifndef __WISECAMERAST_ICF_H__
#define __WISECAMERAST_ICF_H__

#include "WiseCameraSimplePeriodicTracker.h"
#include "WiseCameraICFMsg_m.h"
#include "WiseDefinitionsTracking.h" //include for definitions of states and measurements
#include "WiseCameraICF_utils.h" //include specific-structures for single-target tracking using ICF (in 'icf' namespace)

/*! \class WiseCameraICF
 *  \brief This class implements distributed Single-target tracking based on Information Consensus Filter
 *
 *  The KCF algorithm has been modified to be used for multi-target tracking by using ground-truth for
 *  associating previous targets and obtained measurements - see function make_measurements()
 *
 *  More details available at "Kamal et al., XXXXX, IEEE TAC2013"
 */
class WiseCameraICF : public WiseCameraSimplePeriodicTracker
{

private:
    static ofstream logger; //!< Used to collect node print-out

    unsigned int dimS; //!< Dimension of the state vector
    unsigned int dimM; //!< Dimension of the measurement vector

    std::vector<icf::node_ctrl_t> node_controls; //!< Structure for controlling node's operations

    //Target management
    int n_targets;       //!< Number of targets being tracked by the node
    int max_neigb_network;       //!< Maximum number of neighbors in the network (connectivity degree)

    //ICF filters for all targets (prior/posterior state & covariance, transition/measurement matrices,...)
    std::vector<icf::ICF_t> ICFs;//!< List of ICFs for each target
    float procNoiseCov;            //!< Common process noise covariance (input in .ned)
    float measNoiseCov;            //!< Common measurement noise covariance (input in .ned)

    //Consensus variables (generic for all targets)
    double alpha;               //!< Rate of adaptation of the consensus (input in .ned)
    unsigned long iter_max;    //!< Maximum number of iterations to be done (input in .ned)
    string share;        //!< ...

    std::vector<icf::icf_state_t> camStatus;

    bool collectNetworkStats;
    bool collectPowerStats;
    bool collectAccuracyStats;

public:
    virtual ~WiseCameraICF();

protected:
    // Functions to be implemented from WiseCameraSimplePeriodicTracker class
    virtual void at_startup();                       //!< Init internal variables. To implement in superclasses of WiseCameraSimplePeriodicTracker.
    virtual void at_finishSpecific() {};
    virtual void at_timer_fired(int index);     //!< Response to alarms generated by specific tracker. To implement in superclasses of WiseCameraSimplePeriodicTracker.
    virtual void at_tracker_init();                 //!< Init resources. To implement in superclasses of WiseCameraSimplePeriodicTracker.
    virtual bool at_tracker_first_sample();        //!< Operations at 1st example. To implement in superclasses of WiseCameraSimplePeriodicTracker.
    virtual bool at_tracker_end_first_sample();   //!< Operations at the end of 1st example. To implement in superclasses of WiseCameraSimplePeriodicTracker.
    virtual bool at_tracker_sample();               //!< Operations at the >1st example. To implement in superclasses of WiseCameraSimplePeriodicTracker.
    virtual bool at_tracker_end_sample();          //!< Operations at the end of >1st example. To implement in superclasses of WiseCameraSimplePeriodicTracker.

    // Functions to be implemented from WiseBaseApplication class
    virtual void process_network_message(WiseApplicationPacket *); //!< Processing of packets received from network. To implement in superclasses of WiseBaseApplication.
    virtual void handleDirectApplicationMessage(WiseApplicationPacket *); //!< Processing of packets received from network. To implement in superclasses of WiseBaseApplication.
    virtual void make_measurements(const std::vector<WiseTargetDetection>&);  //!< Conversion of camera detections into ordered lists of measurements for tracking. To implement in superclasses of WiseBaseApplication.

    virtual void handleMacControlMessage(cMessage *);

private:
    void readParameters();
    void initStructures();        //!< Initialization of internal variables&structures.
    void initKF(int tid);          //!< Initialization of memory for KF variables
    int sendICFmessage(int tid);  //!< Send a message to neigbourgs to perfom consensus.
    void logResult(int tid);       //!< Write results in a logfile

    //void dataAssociation();
    //void prepData (int tid);
    void consensusStart(int tid);
    void consensusProcess(int tid);
    void checkNextConsensusRound(int tid);
    //void estimate(int tid);

    //int findIndexInBuffer(int tid, int iter_index);
    //void storeDataInBuffer(int tid, int iter_index, int nodeID, WiseCameraICFMsg *m);
};

#endif // __WISECAMERAST_ICF_H__
