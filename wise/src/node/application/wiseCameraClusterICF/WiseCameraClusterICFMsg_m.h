//
// Generated file, do not edit! Created by nedtool 5.0 from wise/src/node/application/wiseCameraClusterICF/WiseCameraClusterICFMsg.msg.
//

#ifndef __WISECAMERACLUSTERICFMSG_M_H
#define __WISECAMERACLUSTERICFMSG_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "WiseApplicationPacket_m.h"
	#include "WiseDefinitionsTracking.h"
	#include <opencv.hpp>
// }}

/**
 * Class generated from <tt>wise/src/node/application/wiseCameraClusterICF/WiseCameraClusterICFMsg.msg:20</tt> by nedtool.
 * <pre>
 * packet WiseCameraClusterICFMsg extends WiseApplicationPacket
 * {
 *     unsigned long trackingCount;  //already defined in WiseSimplePeriodicTrackerMessage
 *     unsigned long iterationStep;
 *     unsigned int targetID; //already defined in WiseSimplePeriodicTrackerMessage
 *     unsigned int TypeNeighbour; //already defined in WiseSimplePeriodicTrackerMessage
 * 
 *     cv::Mat ICFv; // information vector of the target estimation by the node
 *     cv::Mat ICFV; // information matrix of the target estimation by the node
 * 	//cv::Mat W; // information matrix of the target estimation by the node
 * }
 * </pre>
 */
class WiseCameraClusterICFMsg : public ::WiseApplicationPacket
{
  protected:
    unsigned long trackingCount;
    unsigned long iterationStep;
    unsigned int targetID;
    unsigned int TypeNeighbour;
    cv::Mat ICFv;
    cv::Mat ICFV;

  private:
    void copy(const WiseCameraClusterICFMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WiseCameraClusterICFMsg&);

  public:
    WiseCameraClusterICFMsg(const char *name=nullptr, int kind=0);
    WiseCameraClusterICFMsg(const WiseCameraClusterICFMsg& other);
    virtual ~WiseCameraClusterICFMsg();
    WiseCameraClusterICFMsg& operator=(const WiseCameraClusterICFMsg& other);
    virtual WiseCameraClusterICFMsg *dup() const {return new WiseCameraClusterICFMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned long getTrackingCount() const;
    virtual void setTrackingCount(unsigned long trackingCount);
    virtual unsigned long getIterationStep() const;
    virtual void setIterationStep(unsigned long iterationStep);
    virtual unsigned int getTargetID() const;
    virtual void setTargetID(unsigned int targetID);
    virtual unsigned int getTypeNeighbour() const;
    virtual void setTypeNeighbour(unsigned int TypeNeighbour);
    virtual cv::Mat& getICFv();
    virtual const cv::Mat& getICFv() const {return const_cast<WiseCameraClusterICFMsg*>(this)->getICFv();}
    virtual void setICFv(const cv::Mat& ICFv);
    virtual cv::Mat& getICFV();
    virtual const cv::Mat& getICFV() const {return const_cast<WiseCameraClusterICFMsg*>(this)->getICFV();}
    virtual void setICFV(const cv::Mat& ICFV);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WiseCameraClusterICFMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WiseCameraClusterICFMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __WISECAMERACLUSTERICFMSG_M_H

