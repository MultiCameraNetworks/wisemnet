//
// Generated file, do not edit! Created by nedtool 5.0 from wise/src/node/application/wiseCameraMTIC/WiseCameraMTIC_Msg.msg.
//

#ifndef __WISECAMERAMTIC_MSG_M_H
#define __WISECAMERAMTIC_MSG_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "WiseApplicationPacket_m.h"
	#include "WiseDefinitionsTracking.h"
	#include <opencv.hpp>
// }}

/**
 * Enum generated from <tt>wise/src/node/application/wiseCameraMTIC/WiseCameraMTIC_Msg.msg:27</tt> by nedtool.
 * <pre>
 * enum WiseICFMTICCPacketType
 * {
 * 
 *     MTIC_COLLABORATION_DATA1 = 2001;
 *     MTIC_COLLABORATION_END = 2002;
 * }
 * </pre>
 */
enum WiseICFMTICCPacketType {
    MTIC_COLLABORATION_DATA1 = 2001,
    MTIC_COLLABORATION_END = 2002
};

/**
 * Class generated from <tt>wise/src/node/application/wiseCameraMTIC/WiseCameraMTIC_Msg.msg:32</tt> by nedtool.
 * <pre>
 * packet WiseCameraMTIC_Msg extends WiseApplicationPacket
 * {
 *     unsigned int pktType; //WiseICFCPacketType
 * 
 *     unsigned long trackingCount;  //already defined in WiseSimplePeriodicTrackerMessage
 *     unsigned long iterationStep;
 *     unsigned int targetID; //already defined in WiseSimplePeriodicTrackerMessage
 *     unsigned int TypeNeighbour; //already defined in WiseSimplePeriodicTrackerMessage
 * 
 *     cv::Mat ICFv; // information vector of the target estimation by the node
 *     cv::Mat ICFV; // information matrix of the target estimation by the node
 *     cv::Mat ICFW; // information matrix of the target estimation by the node
 * }
 * </pre>
 */
class WiseCameraMTIC_Msg : public ::WiseApplicationPacket
{
  protected:
    unsigned int pktType;
    unsigned long trackingCount;
    unsigned long iterationStep;
    unsigned int targetID;
    unsigned int TypeNeighbour;
    cv::Mat ICFv;
    cv::Mat ICFV;
    cv::Mat ICFW;

  private:
    void copy(const WiseCameraMTIC_Msg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WiseCameraMTIC_Msg&);

  public:
    WiseCameraMTIC_Msg(const char *name=nullptr, int kind=0);
    WiseCameraMTIC_Msg(const WiseCameraMTIC_Msg& other);
    virtual ~WiseCameraMTIC_Msg();
    WiseCameraMTIC_Msg& operator=(const WiseCameraMTIC_Msg& other);
    virtual WiseCameraMTIC_Msg *dup() const {return new WiseCameraMTIC_Msg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPktType() const;
    virtual void setPktType(unsigned int pktType);
    virtual unsigned long getTrackingCount() const;
    virtual void setTrackingCount(unsigned long trackingCount);
    virtual unsigned long getIterationStep() const;
    virtual void setIterationStep(unsigned long iterationStep);
    virtual unsigned int getTargetID() const;
    virtual void setTargetID(unsigned int targetID);
    virtual unsigned int getTypeNeighbour() const;
    virtual void setTypeNeighbour(unsigned int TypeNeighbour);
    virtual cv::Mat& getICFv();
    virtual const cv::Mat& getICFv() const {return const_cast<WiseCameraMTIC_Msg*>(this)->getICFv();}
    virtual void setICFv(const cv::Mat& ICFv);
    virtual cv::Mat& getICFV();
    virtual const cv::Mat& getICFV() const {return const_cast<WiseCameraMTIC_Msg*>(this)->getICFV();}
    virtual void setICFV(const cv::Mat& ICFV);
    virtual cv::Mat& getICFW();
    virtual const cv::Mat& getICFW() const {return const_cast<WiseCameraMTIC_Msg*>(this)->getICFW();}
    virtual void setICFW(const cv::Mat& ICFW);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WiseCameraMTIC_Msg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WiseCameraMTIC_Msg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __WISECAMERAMTIC_MSG_M_H

