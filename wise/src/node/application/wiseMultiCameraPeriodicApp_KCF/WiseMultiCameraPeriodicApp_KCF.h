// *****************************************************************************************
// Copyright (C) 2017 Juan C. SanMiguel and Andrea Cavallaro
// You may use, distribute and modify this code under the terms of the ACADEMIC PUBLIC
// license (see the attached LICENSE_WISE file).
//
// This file is part of the WiseMnet simulator
//
// Updated contact information:
//  - Juan C. SanMiguel - Universidad Autonoma of Madrid - juancarlos.sanmiguel@uam.es
//  - Andrea Cavallaro - Queen Mary University of London - a.cavallaro@qmul.ac.uk
//
// Please cite the following reference when publishing results obtained with WiseMnet:
//   J. SanMiguel & A. Cavallaro,
//   "Networked Computer Vision: the importance of a holistic simulator",
//   IEEE Computer, 50(7):35-43, Jul 2017, http://ieeexplore.ieee.org/document/7971873/
// *****************************************************************************************

/**
 * \file WiseMultiCameraPeriodicApp_KCF.h
 * \author Juan C. SanMiguel (2017)
 * \brief Header file for the WiseMultiCameraPeriodicApp_KCF class
 * \version 1.4
 */

#ifndef __WISECAMERAKCF_H__
#define __WISECAMERAKCF_H__

#include <wiseCameraPeriodicApp/WiseCameraPeriodicApp.h>
#include <wiseMultiCameraPeriodicApp_KCF/WiseMultiCameraPeriodicApp_KCFPacket_m.h>
#include <wiseMultiCameraPeriodicApp_KCF/WiseMultiCameraPeriodicApp_KCF_utils.h> //include specific-structures for single-target tracking using KCF (in 'kcf' namespace)

#define MAX_SIZE_BUFFER 10

using namespace kcf;

/*! \class WiseCameraKCF
 *  \brief This class implements the Kalman Consensus Filter (KCF) for distributed target tracking.
 *
 *  Kalman Consensus Filter approach (KCF) performs distributed fusion of tracking data by using
 *  the vision graph (ie, neigbourgs with shared FOV).It considers a 4D state and 2D measurement
 *  vectors. The approach  performs the following stages: 1) Intra-node KF computation 2) Inter-node
 *  fusion of tracking data using IF-based formulation and 3) Consensus over the final state achieved
 *  by each node.
 *
 *  The KCF algorithm has been modified to be used for multi-target tracking by using ground-truth for
 *  associating previous targets and obtained measurements - see function make_measurements()
 *
 *  More details available at:
 *         R. Olfati-Saber, "Kalman-consensus filter: Optimality stability and performance",
 *         Proc. IEEE Conf. Decision and Control, pp. 7036-7042, 2009-Dec.
 *         http://ieeexplore.ieee.org/document/4118472
 */
class WiseMultiCameraPeriodicApp_KCF : public WiseCameraPeriodicApp
{

private:
    int _tracking_step_counter;  //!< internal counter for tracking steps

    std::vector<node_ctrl_t> node_controls; //!< Structure for controlling node's operations

    //Target management
    unsigned int n_targets;                 //!< Number of targets being tracked by the node
    unsigned int dimS;                      //!< Dimension of the state vector
    unsigned int dimM;                      //!< Dimension of the measurement vector
    std::vector<cv::Mat> states_init;       //!< Initial state of the targets at first tracking step (TrackingCounter=0, x_0)
    std::vector<cv::Mat> states_estimate;   //!< Posterior target states after KF estimation   (x_l)
    std::vector<cv::Mat> states_final;      //!< Posterior target states after KF estimation + consensus (xf_l)
    std::vector<cv::Mat> z;                 //!< Measurements obtained at each tracking step   (z_l)
    std::vector<cv::Mat> xgt;               //!< Ground-truth positions of target states (gt_l)
    std::vector<double> error;              //!< Error of the target estimation
    std::vector<double> errorAcc;           //!< Error of the target estimation (accumulated)

    //KF variables (generic for all targets)
    std::vector<KalmanFilter_t> KFs;             //!< List of KFs for each target
    float procNoiseCov;                      //!< Common process noise covariance (input in .ned)
    float measNoiseCov;                  //!< Common measurement noise covariance (input in .ned)

    //Consensus variables (generic for all targets)
    double alpha;               //!< Rate of adaptation of the consensus (input in .ned)
    unsigned long iter_max;    //!< Maximum number of iterations to be done (input in .ned)
    string _share_msg;        //!< ...

    kcf_state_t _camStatus;

protected:
    //Functions to be defined in sub-classes (mandatory)
   void at_timer_fired(int index);  //!< Response to alarms generated by specific algorithm. To define in superclass (mandatory)
   void at_startup();                 //!< Initialize internal variables. To define in sub-classes for each specific algorithm (mandatory)
   void at_finishSpecific();           //!< Release resources. To define in sub-classes for each specific algorithm (mandatory)
   bool at_init();                     //!< Initialize resources based on sampled data. To define in sub-classes for each specific algorithm (mandatory)
   bool at_sample();                   //!< Operations for processing each sample. To define in sub-classes for each specific algorithm (mandatory)
   bool at_end_sample();               //!< Operations after processing each sample. To define in sub-classes for each specific algorithm (mandatory)
   void make_measurements(const std::vector<WiseTargetDetection>&); //!< Conversion of camera detections into ordered lists of measurements for tracking. To define in sub-classes for each specific algorithm (mandatory)
   bool process_network_message(WiseBaseAppPacket *m); //!< Operations for processing each packet from network. To define in sub-classes for each specific algorithm (mandatory)
   void handleDirectApplicationMessage(WiseBaseAppPacket *); //!< Process a received packet from a direct node-to-node links (to be implemented in superclasses of WiseBaseApp)

   bool at_first_sample();
   bool at_end_first_sample();
    //virtual bool at_tracker_sample();               //!< Operations at the >1st example. To implement in superclasses of WiseCameraSimplePeriodicTracker.
//    virtual bool at_tracker_end_sample();          //!< Operations at the end of >1st example. To implement in superclasses of WiseCameraSimplePeriodicTracker.

    // Functions to be implemented from WiseBaseApplication class
    //virtual void process_network_message(WiseApplicationPacket *); //!< Processing of packets received from network. To implement in superclasses of WiseBaseApplication.
    //virtual void handleDirectApplicationMessage(WiseApplicationPacket *); //!< Processing of packets received from network. To implement in superclasses of WiseBaseApplication.
   // virtual void make_measurements(const std::vector<WiseTargetDetection>&);  //!< Conversion of camera detections into ordered lists of measurements for tracking. To implement in superclasses of WiseBaseApplication.

    //virtual void handleMacControlMessage(cMessage *);

private:
    void readParameters();
    void initStructures();        //!< Initialization of internal variables&structures.
    int sendKCFmessage(int tid);  //!< Send a message to neigbourgs to perfom consensus.
    void logResult(int tid);//!< Write results in a logfile
    void estimateTarget(int tid);
    void predictTarget(int tid);
    void consensusMesurements(int tid);
    void consensusState(int tid);
    int findIndexInBuffer(int tid, int iter_index);
    void storeDataInBuffer(int tid, int iter_index, int nodeID, WiseMultiCameraPeriodicApp_KCFPacket*m);
};

#endif // __WISECAMERAKCF_H__
