//
// Generated file, do not edit! Created by nedtool 5.0 from wise/src/node/application/wiseCameraPeopleDet/WiseCameraPeopleDetPacket.msg.
//

#ifndef __WISECAMERAPEOPLEDETPACKET_M_H
#define __WISECAMERAPEOPLEDETPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "WiseApplicationPacket_m.h"
	#include <opencv.hpp>	
	#include <vector>
	typedef std::vector<std::vector<cv::Mat> > descVector;
// }}

/**
 * Class generated from <tt>wise/src/node/application/wiseCameraPeopleDet/WiseCameraPeopleDetPacket.msg:35</tt> by nedtool.
 * <pre>
 * packet WiseCameraPeopleDetPacket extends WiseApplicationPacket
 * {
 *     unsigned long iterationStep;
 *     unsigned int TypeNeighbour; //already defined in WiseSimplePeriodicTrackerMessage
 * 
 *     unsigned int numTargets;
 *     unsigned int histSize;
 *     descVector descBGR; //descriptor of detected targets
 *     cv::Mat frame; // currentFrame	
 * 
 * 	//std::vector<cv::Mat> descriptors;
 * 	//std::vector<std::vector<cv::Mat> > descriptors;
 * 
 * 	//unsigned long trackingCount;  //already defined in WiseSimplePeriodicTrackerMessage	
 * 	//unsigned int targetID; //already defined in WiseSimplePeriodicTrackerMessage
 * 	//double positionX; //already defined in WiseSimplePeriodicTrackerMessage
 * 	//double positionY; //already defined in WiseSimplePeriodicTrackerMessage
 * 
 * 	//double Vx; 	// x-velocity of the target
 * 	//double Vy;	// y-velocity of the target	
 * 	//cv::Mat IF_u; // information vector of the target estimation by the node
 * 	//cv::Mat frame; // information matrix of the target estimation by the node
 * 
 * }
 * </pre>
 */
class WiseCameraPeopleDetPacket : public ::WiseApplicationPacket
{
  protected:
    unsigned long iterationStep;
    unsigned int TypeNeighbour;
    unsigned int numTargets;
    unsigned int histSize;
    descVector descBGR;
    cv::Mat frame;

  private:
    void copy(const WiseCameraPeopleDetPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WiseCameraPeopleDetPacket&);

  public:
    WiseCameraPeopleDetPacket(const char *name=nullptr, int kind=0);
    WiseCameraPeopleDetPacket(const WiseCameraPeopleDetPacket& other);
    virtual ~WiseCameraPeopleDetPacket();
    WiseCameraPeopleDetPacket& operator=(const WiseCameraPeopleDetPacket& other);
    virtual WiseCameraPeopleDetPacket *dup() const {return new WiseCameraPeopleDetPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned long getIterationStep() const;
    virtual void setIterationStep(unsigned long iterationStep);
    virtual unsigned int getTypeNeighbour() const;
    virtual void setTypeNeighbour(unsigned int TypeNeighbour);
    virtual unsigned int getNumTargets() const;
    virtual void setNumTargets(unsigned int numTargets);
    virtual unsigned int getHistSize() const;
    virtual void setHistSize(unsigned int histSize);
    virtual descVector& getDescBGR();
    virtual const descVector& getDescBGR() const {return const_cast<WiseCameraPeopleDetPacket*>(this)->getDescBGR();}
    virtual void setDescBGR(const descVector& descBGR);
    virtual cv::Mat& getFrame();
    virtual const cv::Mat& getFrame() const {return const_cast<WiseCameraPeopleDetPacket*>(this)->getFrame();}
    virtual void setFrame(const cv::Mat& frame);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WiseCameraPeopleDetPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WiseCameraPeopleDetPacket& obj) {obj.parsimUnpack(b);}


#endif // ifndef __WISECAMERAPEOPLEDETPACKET_M_H

