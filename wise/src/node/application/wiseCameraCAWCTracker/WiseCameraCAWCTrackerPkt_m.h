//
// Generated file, do not edit! Created by nedtool 5.0 from wise/src/node/application/wiseCameraCAWCTracker/WiseCameraCAWCTrackerPkt.msg.
//

#ifndef __WISECAMERACAWCTRACKERPKT_M_H
#define __WISECAMERACAWCTRACKERPKT_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "WiseApplicationPacket_m.h"
	#include <opencv.hpp>	
	#include <vector>
	typedef std::vector<std::vector<cv::Mat> > descVector;
// }}

/**
 * Enum generated from <tt>wise/src/node/application/wiseCameraCAWCTracker/WiseCameraCAWCTrackerPkt.msg:29</tt> by nedtool.
 * <pre>
 * enum WiseCAWCPacketType
 * {
 * 
 *     CAWC_UTILITY = 100;
 *     CAWC_NEWMANAGER = 101;
 *     CAWC_NEWMANAGER_ACK = 102;
 *     CAWC_NEWMANAGER_ACK_SEND = 103;
 *     CAWC_NEWMANAGER_SEND = 104;
 *     CAWC_NEGOTIATION_JOIN = 105;
 *     CAWC_NEGOTIATION_REPLY = 106;
 *     CAWC_COLLABORATION_REQUEST = 107;
 *     CAWC_COLLABORATION_DATA = 108;
 *     CAWC_COLLABORATION_END = 109;
 * }
 * 
 * 
 * //class noncobject std::vector<cv::Mat>; 
 * //class noncobject std::vector<std::vector<cv::Mat> >;
 * </pre>
 */
enum WiseCAWCPacketType {
    CAWC_UTILITY = 100,
    CAWC_NEWMANAGER = 101,
    CAWC_NEWMANAGER_ACK = 102,
    CAWC_NEWMANAGER_ACK_SEND = 103,
    CAWC_NEWMANAGER_SEND = 104,
    CAWC_NEGOTIATION_JOIN = 105,
    CAWC_NEGOTIATION_REPLY = 106,
    CAWC_COLLABORATION_REQUEST = 107,
    CAWC_COLLABORATION_DATA = 108,
    CAWC_COLLABORATION_END = 109
};

/**
 * Class generated from <tt>wise/src/node/application/wiseCameraCAWCTracker/WiseCameraCAWCTrackerPkt.msg:49</tt> by nedtool.
 * <pre>
 * //NOTE: each 'pktType' should be defined as a different packet. 
 * // For simplification, all packets are defined in the same structure 
 * // and depending on 'pktType', we use selected parameters of the packet
 * packet WiseCameraCAWCTrackerPkt extends WiseApplicationPacket
 * {
 *     unsigned int pktType; //WiseCAWCPacketType
 * 
 *     int nodeID;
 *     int camID;
 *     int frameID;
 * 
 *     //CAWC_UTILITY
 *     double utility;
 *     double priority;
 *     double battery_level;
 *     double load_level;
 * 
 *     //CAWC_ANNOUNCE_MANAGER
 *     int newManager;
 *     cv::Mat x;
 *     cv::Mat P;
 *     bool initialized;
 * 
 * 	//CAWC_ANNOUNCE_MANAGER_ACK
 * 
 * 	//CAWC_NEGOTIATION_MANAGER
 * 
 *     //CAWC_NEGOTIATION_CAMERA_REPLY
 *     bool reply;
 * 
 * 	//CAWC_COLLABORATION_REQUEST
 * 
 *     //CAWC_COLLABORATION_SEND_DATA
 *     cv::Mat z; //measurement	
 *     cv::Mat H; //measurement matrix
 *     cv::Mat Ht; //measurement matrix (transpose)
 *     cv::Mat Rinv; //covariance measurement
 * 
 * 	//CAWC_COLLABORATION_END
 * 
 * }
 * </pre>
 */
class WiseCameraCAWCTrackerPkt : public ::WiseApplicationPacket
{
  protected:
    unsigned int pktType;
    int nodeID;
    int camID;
    int frameID;
    double utility;
    double priority;
    double battery_level;
    double load_level;
    int newManager;
    cv::Mat x;
    cv::Mat P;
    bool initialized;
    bool reply;
    cv::Mat z;
    cv::Mat H;
    cv::Mat Ht;
    cv::Mat Rinv;

  private:
    void copy(const WiseCameraCAWCTrackerPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WiseCameraCAWCTrackerPkt&);

  public:
    WiseCameraCAWCTrackerPkt(const char *name=nullptr, int kind=0);
    WiseCameraCAWCTrackerPkt(const WiseCameraCAWCTrackerPkt& other);
    virtual ~WiseCameraCAWCTrackerPkt();
    WiseCameraCAWCTrackerPkt& operator=(const WiseCameraCAWCTrackerPkt& other);
    virtual WiseCameraCAWCTrackerPkt *dup() const {return new WiseCameraCAWCTrackerPkt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPktType() const;
    virtual void setPktType(unsigned int pktType);
    virtual int getNodeID() const;
    virtual void setNodeID(int nodeID);
    virtual int getCamID() const;
    virtual void setCamID(int camID);
    virtual int getFrameID() const;
    virtual void setFrameID(int frameID);
    virtual double getUtility() const;
    virtual void setUtility(double utility);
    virtual double getPriority() const;
    virtual void setPriority(double priority);
    virtual double getBattery_level() const;
    virtual void setBattery_level(double battery_level);
    virtual double getLoad_level() const;
    virtual void setLoad_level(double load_level);
    virtual int getNewManager() const;
    virtual void setNewManager(int newManager);
    virtual cv::Mat& getX();
    virtual const cv::Mat& getX() const {return const_cast<WiseCameraCAWCTrackerPkt*>(this)->getX();}
    virtual void setX(const cv::Mat& x);
    virtual cv::Mat& getP();
    virtual const cv::Mat& getP() const {return const_cast<WiseCameraCAWCTrackerPkt*>(this)->getP();}
    virtual void setP(const cv::Mat& P);
    virtual bool getInitialized() const;
    virtual void setInitialized(bool initialized);
    virtual bool getReply() const;
    virtual void setReply(bool reply);
    virtual cv::Mat& getZ();
    virtual const cv::Mat& getZ() const {return const_cast<WiseCameraCAWCTrackerPkt*>(this)->getZ();}
    virtual void setZ(const cv::Mat& z);
    virtual cv::Mat& getH();
    virtual const cv::Mat& getH() const {return const_cast<WiseCameraCAWCTrackerPkt*>(this)->getH();}
    virtual void setH(const cv::Mat& H);
    virtual cv::Mat& getHt();
    virtual const cv::Mat& getHt() const {return const_cast<WiseCameraCAWCTrackerPkt*>(this)->getHt();}
    virtual void setHt(const cv::Mat& Ht);
    virtual cv::Mat& getRinv();
    virtual const cv::Mat& getRinv() const {return const_cast<WiseCameraCAWCTrackerPkt*>(this)->getRinv();}
    virtual void setRinv(const cv::Mat& Rinv);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const WiseCameraCAWCTrackerPkt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, WiseCameraCAWCTrackerPkt& obj) {obj.parsimUnpack(b);}


#endif // ifndef __WISECAMERACAWCTRACKERPKT_M_H

