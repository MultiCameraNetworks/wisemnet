### ------------------------------------------------------------------------ ###
### WiseMultiCameraPeriodicApp_KCF
### 
### Description: multi-camera tracking for a single moving target using ICF algorithm.
###				 Simulated scenario with (ideal and real) resource usage and communications
### 
### Available simulations extending the configuration in [General]:
###		- [Config TestIdeal]: test for ideal conditions for processing, sensing and communication
###		- [Config TestReal]: test for real conditions for communication
###		- [Config IterIdeal]: test to study the improvement in accuracy by performing additional rounds of consensus with ideal comms
###		- [Config IterReal]: test to study the improvement in accuracy by performing additional rounds of consensus with real comms
###		- [Config simTargets]: test to simulate target trajectories and visualize them
### 	See the configuration parameters at the bottom of this file.
###
###	References:	
###		- KCF algorithm: 
###			R. Olfati-Saber, "Kalman-consensus filter: Optimality stability and performance", 
###			Proc. IEEE Conf. Decision and Control, pp. 7036-7042, 2009-Dec.
###			http://ieeexplore.ieee.org/document/4118472
###		
### Please cite the following reference when publishing results obtained with WiseMnet:
###   J. SanMiguel & A. Cavallaro,
###   "Networked Computer Vision: the importance of a holistic simulator",
###   IEEE Computer, 50(7):35-43, Jul 2017, http://ieeexplore.ieee.org/document/7971873/		
###
### Date: 2015-06-01 (updated 2017-09-12)
### Author: juancarlos.sanmiguel@uam.es (Universidad Autonoma de Madrid)
### 
### ------------------------------------------------------------------------ ###

[General]
include ../WiseCastalia.ini  # ALWAYS include WiseCastalia.ini
repeat = 1
sim-time-limit =  200s

# ==============================================
# Sensor Network setup
# ==============================================
SN.field_x = 500                   # meters
SN.field_y = 500                   # meters
SN.numNodes = 8					   # number of available views/cameras

SN.use_calibration = false		   # we do not have calibration for camera nodes

#GUI to visualize an empty terrain (white/black zhenital view with FOVs and moving targets)
SN.TerrainName = "WiseTerrainEmpty"
SN.wiseTerrain.gui = "opencv"			#type of GUI (current version only supports "opencv")
SN.wiseTerrain.gui_wait_start = false 	#press-key to start simulation
SN.wiseTerrain.gui_show = true		  	#shows a cenital view of the network & moving targets
SN.wiseTerrain.draw_trajectory = false  #shows trajectories of moving targets

# ==============================================
# Communication: Wireless Channel
# ==============================================
SN.dummy_communication = true 			#'false'=enable the wireless communication pipeline 
SN.dummyChannel.collectTraceInfo = true	#enable trace log information in "wise-trace.txt"

### Ideal wireless channel (unit disk model)
SN.wirelessChannel.d0 = 1.0 #default (1.0);
SN.wirelessChannel.sigma = 0
SN.wirelessChannel.bidirectionalSigma = 0
#SN.wirelessChannel.pathLossExponent = 2.4 #default 2.4
#increase the size of the disk-model for comms (PLd0=55-49m, 50-75m, 45-121m, 40-195m
#SN.wirelessChannel.PLd0 = 35 #default=55 (around 49m range)
SN.wirelessChannel.PLd0 = -172

# ==============================================
# Physical Processes (environment's events) 
# ==============================================
SN.numPhysicalProcesses = 1					#number of sensed data (i.e. moving targets)
SN.physicalProcessName = "WiseMovingTarget"
# --- 
SN.physicalProcess[**].bb_width = 10.00
SN.physicalProcess[**].bb_height = 10.00
SN.physicalProcess[**].move_min_x = 75
SN.physicalProcess[**].move_max_x = 425
SN.physicalProcess[**].move_min_y = 75
SN.physicalProcess[**].move_max_y = 425
SN.physicalProcess[**].log_enabled = false
SN.physicalProcess[**].collectTraceInfo = false

SN.physicalProcess[**].x_init = 120
SN.physicalProcess[**].y_init = 100
SN.physicalProcess[**].random_init = false
SN.physicalProcess[**].update_time = 0.25
#SN.physicalProcess[0].move_type = "lin_random"
SN.physicalProcess[**].move_type = "lin_noise"
SN.physicalProcess[**].move_later = 0
SN.physicalProcess[**].noise = 20

# ==============================================
# Node: Applications 
# ==============================================
SN.node[**].ApplicationName = "WiseMultiCameraPeriodicApp_KCF"
SN.node[**].Application.collectTraceInfo = true
SN.node[**].Application.sampling_time = 0.25

# if set to 'false', the processing starts at time=0 (as discovering FOV neighbours is done instantly)
# if set to 'true', there is delay to discover the Comms neighbours (different for each node)
SN.node[**].Application.neighborDiscoverCOM = true
SN.node[**].Application.neighborDiscoverFOVoverlap = true
SN.node[**].Application.latencyNeighborDiscoverCOM = 0.5
SN.node[**].Application.share="FOV"
SN.node[**].Application.procNoiseCov = 20
SN.node[**].Application.measNoiseCov = 20
SN.node[**].Application.iter_max = 10
SN.node[**].Application.alpha = 0.1
SN.node[**].Application.synchronizedStartup = true

# ==============================================
# Node: Sensor Managers & FOV
# ==============================================
SN.node[**].zCoor = 0.00
SN.node[**].phi = 0.00
SN.node[**].theta = 0.00

SN.node[**].SensorManagerName = "WiseCameraManager"
#SN.node[**].SensorManager.fov_type = "bounding_box"
#SN.node[**].SensorManager.fov_bb_width = 40.000000
#SN.node[**].SensorManager.fov_bb_height = 40.000000
#SN.node[**].SensorManager.collectTraceInfo = false
SN.node[**].SensorManager.fov_type = "directional"
SN.node[**].SensorManager.fov_di_dov = 250
SN.node[**].SensorManager.fov_di_aov = 30


SN.node[0].xCoor = 25
SN.node[0].yCoor = 25
SN.node[0].SensorManager.fov_di_los = 45
SN.node[0].Application.manualConnectivityCOM = "1 1 0 0 0 0 0 1"

SN.node[1].xCoor = 250
SN.node[1].yCoor = 25
SN.node[1].SensorManager.fov_di_los = 90
SN.node[1].Application.manualConnectivityCOM = "1 1 1 0 0 0 0 0"

SN.node[2].xCoor = 475
SN.node[2].yCoor = 25
SN.node[2].SensorManager.fov_di_los = 135
SN.node[2].Application.manualConnectivityCOM = "0 1 1 1 0 0 0 0"

SN.node[3].xCoor = 475
SN.node[3].yCoor = 250
SN.node[3].SensorManager.fov_di_los = 180
SN.node[3].Application.manualConnectivityCOM = "0 0 1 1 1 0 0 0"

SN.node[4].xCoor = 475
SN.node[4].yCoor = 475
SN.node[4].SensorManager.fov_di_los = 225
SN.node[4].Application.manualConnectivityCOM = "0 0 0 1 1 1 0 0"

SN.node[5].xCoor = 250
SN.node[5].yCoor = 475
SN.node[5].SensorManager.fov_di_los = 270
SN.node[5].Application.manualConnectivityCOM = "0 0 0 0 1 1 1 0"

SN.node[6].xCoor = 25
SN.node[6].yCoor = 475
SN.node[6].SensorManager.fov_di_los = 315
SN.node[6].Application.manualConnectivityCOM = "0 0 0 0 0 1 1 1"

SN.node[7].xCoor = 25
SN.node[7].yCoor = 250
SN.node[7].SensorManager.fov_di_los = 360
SN.node[7].Application.manualConnectivityCOM = "1 0 0 0 0 0 1 1"

# ==============================================
# Node: Resource Managers (cpu, memory, energy)
# ==============================================
### Note: 'sigmaCPUClockDrift = 0' means NO drift (ideal)
SN.node[**].ResourceManager.sigmaCPUClockDrift = 0.000000
SN.node[**].ResourceManager.initialEnergy = 1e4
SN.node[**].ResourceManager.CPUfreq = 1.5e9
SN.node[**].ResourceManager.optimizationFactor = 1
 
# ==============================================
# Node: Communication: Radio (Physical Layer)
# ==============================================
### Ideal radio parameters... 
SN.node[**].Communication.Radio.RadioParametersFile = "../../../models/COM/CC2420.txt"
SN.node[**].Communication.Radio.mode = "IDEAL"
SN.node[**].Communication.Radio.collisionModel = 0  # 0:None  1:Simplistic  2:Additive
SN.node[**].Communication.Radio.maxPhyFrameSize = 1024 # in bytes (0 value means no limits)
SN.node[**].Communication.Radio.phyFrameOverhead = 6 # in bytes (802.15.4. = 6 bytes)
SN.node[**].Communication.Radio.bufferSize = 16 #in number of frames
SN.node[**].Communication.Radio.TxOutputPower = "0dBm"
 
# ==============================================
# Node: Communication: MAC (Datalink Layer)
# ==============================================
### MAC without overhaead (ideal)
SN.node[**].Communication.MACProtocolName = "TMAC"
SN.node[**].Communication.MAC.macPacketOverhead = 0
SN.node[**].Communication.MAC.maxTxRetries = 10
SN.node[**].Communication.MAC.allowSinkSync = false
SN.node[**].Communication.MAC.frameTime = 12 #7-3 nodes
SN.node[**].Communication.MAC.phyDataRate = 250 #should match radio, which is 250kbps
SN.node[**].Communication.MAC.collectTraceInfo = false
#SN.node[**].Communication.MAC.collisionResolution = 1

# ==============================================
# Node: Communication: Routing (Network Layer)
# ==============================================
### Routing without overhaead (ideal)
SN.node[**].Communication.Routing.netDataFrameOverhead = 0
SN.node[**].Communication.**.collectTraceInfo = false

# ==================================================
# SPECIFIC TESTS (extending options under [General])
# ==================================================
#basic functionality
[Config TestIdeal]
repeat = 1
sim-time-limit =  200s
SN.wiseTerrain.gui_wait_start = false
SN.wiseTerrain.gui_show = true
SN.node[**].Application.iter_max =10

#test for real conditions for communication
[Config TestReal]
repeat = 1
sim-time-limit =  20s
SN.dummy_communication = false
SN.wiseTerrain.gui_wait_start = false
SN.wiseTerrain.gui_show = true
SN.node[**].Application.iter_max =10

#test to study the improvement in accuracy by performing additional rounds of consensus
#with ideal conditions for communication 
[Config IterIdeal]
repeat = 1
SN.dummy_communication = true    # dummy communication
SN.physicalProcess[0].x_init = ${posx=120,350}
SN.physicalProcess[0].y_init = ${posy=100,375}
SN.wiseTerrain.gui_wait_start = false
SN.wiseTerrain.gui_show = false
SN.node[**].Application.collectTraceInfo = false
SN.node[**].Application.iter_max = ${iter=2,4,6,8,10,12,14,16}

#test to study the improvement in accuracy by performing additional rounds of consensus
#with real conditions for communication 
[Config IterReal]
repeat = 10
SN.dummy_communication = false     #false = real wireless channel
SN.physicalProcess[0].x_init = ${posx=120,350}
SN.physicalProcess[0].y_init = ${posy=100,375}
SN.wiseTerrain.gui_wait_start = false
SN.wiseTerrain.gui_show = false
SN.node[**].Communication.MAC.frameTime = 10
SN.node[**].Application.collectTraceInfo = false
SN.node[**].Application.iter_max = ${iter=2,4,6,8,10,12,14,16}

#test to simulate target trajectories and visualize them 
[Config simTargets]
repeat = 1
sim-time-limit =  100s
SN.physicalProcess[**].log_enabled = true
SN.node[**].Application.collectTraceInfo = false
SN.numPhysicalProcesses = 4
SN.physicalProcess[0].x_init = 350
SN.physicalProcess[0].y_init = 375
SN.physicalProcess[1].x_init = 120
SN.physicalProcess[2].y_init = 375
SN.physicalProcess[3].x_init = 350
SN.physicalProcess[3].y_init = 100
SN.physicalProcess[4].x_init = 120
SN.physicalProcess[4].y_init = 100
SN.wiseTerrain.gui_wait_start = false
SN.wiseTerrain.gui_show = true
SN.wiseTerrain.draw_trajectory = true
SN.node[**].Application.iter_max = 2