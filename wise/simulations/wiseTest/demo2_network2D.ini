### ------------------------------------------------------------------------ ###
### Test_network2D: 
### 
### Description: demo for detecting moving targets within 2D cameras' FOVs
###
### Available sub-configurations:
###		 - 'FOV_squared'-> omnidirectional FOVs (square shaped)
###		 - 'FOV_directional'-> directional FOVs (triangular shaped)
###
### Date: 2011-10-01 (updated 2017-09-07)
### Author: juancarlos.sanmiguel@uam.es (Universidad Autonoma de Madrid)
### 
### ------------------------------------------------------------------------ ###
[General]
include ../WiseCastalia.ini 	# ALWAYS include the WiseCastalia.ini file

# ==============================================
# Simulation setup
# ==============================================
sim-time-limit = 1000s
#sim-time-limit = ${ti=50s,100s,500s} #uncomment to run experiments 

SN.field_x = 150		# meters
SN.field_y = 150		# meters 
SN.numNodes = 5			# number of camera nodes

SN.use_calibration = false		  	#we do not have calibration for camera nodes

#GUI to visualize an empty terrain (white/black zhenital view with FOVs and moving targets)
SN.TerrainName = "WiseTerrainEmpty"
SN.wiseTerrain.gui = "opencv"			#type of GUI (current version only supports "opencv")
SN.wiseTerrain.gui_wait_start = false 		#press-key to start simulation
SN.wiseTerrain.gui_show = true		  	#shows a cenital view of the network & moving targets
SN.wiseTerrain.draw_trajectory = false  	#shows trajectories of moving targets
SN.wiseTerrain.scale_world = 2  		#factor to increase (>1) or decrease (<1) the GUI size

# ==============================================
# Communication: Wireless Channel
# ==============================================
SN.dummy_communication = true 				 #'false'=enable the wireless communication pipeline 
SN.dummyChannel.collectTraceInfo = true		 #enable trace log information in "wise-trace.txt"

### Ideal wireless channel (unit disk model, see Castalia's manual for further descriptions)
SN.wirelessChannel.sigma = 0
SN.wirelessChannel.bidirectionalSigma = 0
SN.wirelessChannel.PLd0 = -172

# ==============================================
# Physical Process (environment's events) 
# ==============================================
SN.numPhysicalProcesses = 2			#number of targets
SN.physicalProcessName = "WiseMovingTarget" 	#type of target (moving targets as 'squares')

SN.physicalProcess[**].bb_width = 10		#default bounding box width for all targets (in pixels)
SN.physicalProcess[**].bb_height = 10  		#default bounding box height for all targets (in pixels)
SN.physicalProcess[**].noise = 0.5		#default noise for motion for all targets (in pixels)

SN.physicalProcess[0].x_init = 80		#initial X-position for target '0'
SN.physicalProcess[0].y_init = 60		#initial Y-position for target '0'
SN.physicalProcess[0].move_type = "lin_random"	#motion pattern for target '0'
SN.physicalProcess[0].update_time = 1		#updated frequency for position of target '0' (in seconds)

SN.physicalProcess[1].x_init = 12.00		#initial X-position for target '1'
SN.physicalProcess[1].y_init = 60.00		#initial Y-position for target '0'
SN.physicalProcess[1].move_type = "lin_noise"	#motion pattern for target '1'
SN.physicalProcess[1].update_time = 5		#updated frequency for position of target '1' (in seconds)

# ==============================================
# Node: Resource Manager (cpu, memory, energy)
# ==============================================
SN.node[**].ResourceManager.sigmaCPUClockDrift = 0	#No CPU clock drift (ideal)

# ==============================================
# Node: Application 
# ==============================================
SN.node[**].ApplicationName = "WiseCameraAppTest"	 		 #application running within each camera node
SN.node[**].Application.neighborDiscoverFOVoverlap = false	 #discovery of network cameras using FOV spatial overlap
SN.node[**].Application.neighborDiscoverCOM = false			 #discovery of network cameras using communications	
SN.node[**].Application.collectTraceInfo = true		 		 #enable trace log information in "wise-trace.txt"

# ==============================================
# Node: Sensor Manager
# ==============================================
SN.node[**].SensorManagerName = "WiseCameraManager" #sensor available (i.e. camera)

SN.node[0].xCoor = 50.00				#X position of camera node
SN.node[0].yCoor = 50.00				#Y position of camera node
SN.node[1].xCoor = 25     
SN.node[1].yCoor = 25.00 
SN.node[2].xCoor = 100   
SN.node[2].yCoor = 100.00
SN.node[3].xCoor = 115   
SN.node[3].yCoor = 70.00
SN.node[4].xCoor = 125    
SN.node[4].yCoor = 90

# ==============================================
# Node: Communication: Radio (Physical Layer)
# ==============================================
### Ideal radio parameters... (see Castalia's manual for further descriptions)
SN.node[**].Communication.Radio.RadioParametersFile = "../../../models/COM/CC2420.txt" #file describing radio capabilities
SN.node[**].Communication.Radio.mode = "IDEAL"		#IDEAL means no collisions and no associated delays for changing the radio states	
SN.node[**].Communication.Radio.collisionModel = 0
SN.node[**].Communication.Radio.TxOutputPower = "0dBm"
SN.node[**].Communication.Radio.maxPhyFrameSize = 0 	# no limits
SN.node[**].Communication.Radio.phyFrameOverhead = 0 

# ==============================================
# Node: Communication: MAC (Datalink Layer)
# ==============================================
### Ideal parameters... (see Castalia's manual for further descriptions)
SN.node[**].Communication.MAC.macPacketOverhead = 0 #MAC without overhaead (ideal)
SN.node[**].Communication.MACProtocolName = "TunableMAC"
#SN.node[**].Communication.MACProtocolName = "BypassMAC"

# ==============================================
# Node: Communication: Routing (Network Layer)
# ==============================================
### Ideal parameters... (see Castalia's manual for further descriptions)
#SN.node[**].Communication.RoutingProtocolName = "BypassRouting"
SN.node[**].Communication.Routing.netDataFrameOverhead = 0 #Routing without overhaead (ideal)

# ==============================================
# SIMULATION SETTINGS
# ==============================================
[Config FOV_squared]
# Node: Sensor Manager using squared FOV
SN.node[**].SensorManager.fov_type = "bounding_box" #type of Field of View (FOV)
SN.node[**].SensorManager.fov_bb_width = 50
SN.node[**].SensorManager.fov_bb_height = 50
SN.node[**].SensorManager.collectTraceInfo = true	#enable trace log information in "wise-trace.txt"

[Config FOV_directional]
# Node: Sensor Manager using directional FOV
SN.node[**].SensorManager.fov_type = "directional"	#type of FOV for camera node (https://legends2k.github.io/2d-fov/design.html)

SN.node[**].SensorManager.fov_di_dov = 60		#depth-of-view for directional sensing (in pixels)
SN.node[**].SensorManager.fov_di_aov = 15		#angle-of-view for directional sensing (in degrees)

SN.node[0].SensorManager.fov_di_los = 45		#length-of-sight for directional sensing (in degrees)
SN.node[1].SensorManager.fov_di_los = 0
SN.node[2].SensorManager.fov_di_los = 90
SN.node[3].SensorManager.fov_di_los = 250
SN.node[4].SensorManager.fov_di_los = 200