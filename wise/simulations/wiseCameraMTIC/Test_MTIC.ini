### ------------------------------------------------------------------------ ###
### WiseCameraMTIC 
### 
### Description: multi-camera tracking for multiple moving targets using MTIC algorithm.
###				 Simulated scenario with (ideal and real) resource usage and communications
### 
### Available simulations extending the configuration in [General]:
###		- [Config TestIdeal]: basic functionality using ideal comms conditions
###		- [Config TestReal]: basic functionality using real comms conditions
###		- [Config MTTreal]: test for multiple targets using ideal comms conditions
###		- [Config MTTideal]: test for multiple targets using real comms conditions
###		- [Config MTTideal_lifetime]: test for multiple targets using ideal comms conditions to estimate network lifetime
###		- [Config IterIdeal]: test for a single target using ideal comms conditions and multiple consensus rounds
###		- [Config IterReal]: test for a single target using real comms conditions and multiple consensus rounds
###		- [Config simTargets]: test to simulate target trajectories
###		- [Config delay]: test for multiple targets using real comms conditions and multiple consensus rounds
### 	See the configuration parameters at the bottom of this file.
###
###	References:	
###		- MTIC algorithm: 
###			Kamal et al, "Distributed Multi-Target Tracking and Data Association in Vision Networks", 
###			IEEE TPAMI 2016.
###			http://ieeexplore.ieee.org/document/7286852/
###		
###		- Experiments over MTIC: 
###			J. SanMiguel & A. Cavallaro, 
###			"Networked Computer Vision: the importance of a holistic simulator", 
###			IEEE COMPUTER 2017 
###			http://ieeexplore.ieee.org/document/XXXX/
###			Copy available at http://www.eecs.qmul.ac.uk/~andrea/wise-mnet.html 			
###
### Date: 2015-06-01 (updated 2017-06-13)
### Author: juancarlos.sanmiguel@uam.es (Universidad Autonoma de Madrid)
### 
### ------------------------------------------------------------------------ ###
[General]
include ../WiseCastalia.ini  # ALWAYS include WiseCastalia.ini
repeat = 1
sim-time-limit =  200s

# ==============================================
# Sensor Network setup
# ==============================================
SN.field_x = 500                   # meters
SN.field_y = 500                   # meters
SN.numNodes = 8					   # camera nodes

SN.use_calibration = false		   # we do not have calibration for camera nodes

#GUI to visualize an empty terrain (white/black zhenital view with FOVs and moving targets)
SN.TerrainName = "WiseTerrainEmpty"
SN.wiseTerrain.gui = "opencv"			#type of GUI (current version only supports "opencv")
SN.wiseTerrain.gui_wait_start = false 	#press-key to start simulation
SN.wiseTerrain.gui_show = true		  	#shows a cenital view of the network & moving targets
SN.wiseTerrain.draw_trajectory = false  #shows trajectories of moving targets

# ==============================================
# Communication: Wireless Channel
# ==============================================
### Ideal wireless channel (unit disk model)
#SN.wirelessChannel.pathLossExponent = 2.4 #default 2.4
#increase the size of the disk-model for comms (PLd0=55-49m, 50-75m, 45-121m, 40-195m
SN.wirelessChannel.PLd0 = 35 #default=55 (around 49m range)
SN.wirelessChannel.d0 = 1.0 #default (1.0);
#SN.wirelessChannel.sigma = 4.0 #default (4.0);
SN.wirelessChannel.bidirectionalSigma = 0
SN.wirelessChannel.sigma = 0
SN.wirelessChannel.collectTraceInfo = false

SN.dummy_communication = true    # uncomment for dummy communication
SN.dummyChannel.collectTraceInfo = false

# ==============================================
# Physical Processes (environment's events) 
# ==============================================
SN.numPhysicalProcesses = 1
SN.physicalProcessName = "WiseMovingTarget"

SN.physicalProcess[**].bb_width = 10.00
SN.physicalProcess[**].bb_height = 10.00
SN.physicalProcess[**].move_min_x = 75
SN.physicalProcess[**].move_max_x = 400
SN.physicalProcess[**].move_min_y = 75
SN.physicalProcess[**].move_max_y = 400
SN.physicalProcess[**].noise_max = 20
SN.physicalProcess[**].noise_min = 10
SN.physicalProcess[**].log_enabled = false
SN.physicalProcess[**].collectTraceInfo = false

SN.physicalProcess[**].move_type = "lin_noise"
SN.physicalProcess[**].move_later = 0
SN.physicalProcess[**].noise = 10
SN.physicalProcess[**].update_time = 0.25
SN.physicalProcess[**].random_init = false

SN.physicalProcess[0].x_init = 120
SN.physicalProcess[0].y_init = 100

# ==============================================
# Node: Applications 
# ==============================================
SN.node[**].ApplicationName = "WiseCameraMTIC"
SN.node[**].Application.collectTraceInfo = false
SN.node[**].Application.collectNetworkStats = false
SN.node[**].Application.collectPowerStats = false
SN.node[**].Application.collectAccuracyStats = true

SN.node[**].Application.showCamImage = false
SN.node[**].Application.sampling_time = 0.25

# if set to 'false', the processing starts at time=0 (as discovering FOV neighbours is done instantly)
# if set to 'true', there is delay to discover the Comms neighbours (different for each node)
SN.node[**].Application.neighbourDiscoverCOM = true
SN.node[**].Application.neighbourDiscoverFOV = true
SN.node[**].Application.latencyNeighbourDiscoverCOM = 0.5
SN.node[**].Application.procNoiseCov = 10
SN.node[**].Application.measNoiseCov = 10
SN.node[**].Application.iter_max = 10
SN.node[**].Application.alpha = 0.3
#SN.node[**].Application.lambda = ${0.0039, 0.078, 0.0156, 0.0312, 0.064, 0.125, 0.25, 0.5, 1, 2}
#1/256=0.0039, 1/128=0.078, 1/64=0.0156, 1/32=0.0312, 1/16=0.0624, 1/8=0.125) 
SN.node[**].Application.lambda = 1/8

# ==============================================
# Node: Sensor Managers & FOV
# ==============================================
SN.node[**].zCoor = 0.00
SN.node[**].phi = 0.00
SN.node[**].theta = 0.00

SN.node[**].SensorManagerName = "WiseCameraManager"
#SN.node[**].SensorManager.fov_type = "bounding_box"
#SN.node[**].SensorManager.fov_bb_width = 40.000000
#SN.node[**].SensorManager.fov_bb_height = 40.000000
#SN.node[**].SensorManager.collectTraceInfo = false
SN.node[**].SensorManager.fov_type = "directional"
SN.node[**].SensorManager.fov_di_dov = 250
SN.node[**].SensorManager.fov_di_aov = 30


SN.node[0].xCoor = 25
SN.node[0].yCoor = 25
SN.node[0].SensorManager.fov_di_los = 45
SN.node[0].Application.userDefinedConnectivity = "1 1 0 0 0 0 0 1"

SN.node[1].xCoor = 250
SN.node[1].yCoor = 25
SN.node[1].SensorManager.fov_di_los = 90
SN.node[1].Application.userDefinedConnectivity = "1 1 1 0 0 0 0 0"

SN.node[2].xCoor = 475
SN.node[2].yCoor = 25
SN.node[2].SensorManager.fov_di_los = 135
SN.node[2].Application.userDefinedConnectivity = "0 1 1 1 0 0 0 0"

SN.node[3].xCoor = 475
SN.node[3].yCoor = 250
SN.node[3].SensorManager.fov_di_los = 180
SN.node[3].Application.userDefinedConnectivity = "0 0 1 1 1 0 0 0"

SN.node[4].xCoor = 475
SN.node[4].yCoor = 475
SN.node[4].SensorManager.fov_di_los = 225
SN.node[4].Application.userDefinedConnectivity = "0 0 0 1 1 1 0 0"

SN.node[5].xCoor = 250
SN.node[5].yCoor = 475
SN.node[5].SensorManager.fov_di_los = 270
SN.node[5].Application.userDefinedConnectivity = "0 0 0 0 1 1 1 0"

SN.node[6].xCoor = 25
SN.node[6].yCoor = 475
SN.node[6].SensorManager.fov_di_los = 315
SN.node[6].Application.userDefinedConnectivity = "0 0 0 0 0 1 1 1"

SN.node[7].xCoor = 25
SN.node[7].yCoor = 250
SN.node[7].SensorManager.fov_di_los = 360
SN.node[7].Application.userDefinedConnectivity = "1 0 0 0 0 0 1 1"

# ==============================================
# Node: Resource Manager (cpu, memory, energy)
# ==============================================
### Note: 'sigmaCPUClockDrift = 0' means NO drift (ideal)
SN.node[**].ResourceManager.sigmaCPUClockDrift = 0.000000
SN.node[**].ResourceManager.initialEnergy = 1e4
SN.node[**].ResourceManager.CPUfreq = 1.5e9
SN.node[**].ResourceManager.optimizationFactor = 1

# ==============================================
# Node: Communication: Radio (Physical Layer)
# ==============================================
### Ideal radio parameters... 
SN.node[**].Communication.Radio.RadioParametersFile = "../../../models/COM/CC2420.txt"
SN.node[**].Communication.Radio.mode = "IDEAL"
SN.node[**].Communication.Radio.collisionModel = 0  # 0:None  1:Simplistic  2:Additive
SN.node[**].Communication.Radio.maxPhyFrameSize = 1024 # in bytes (0 value means no limits)
SN.node[**].Communication.Radio.phyFrameOverhead = 6 # in bytes (802.15.4. = 6 bytes)
SN.node[**].Communication.Radio.bufferSize = 16 #in number of frames
SN.node[**].Communication.Radio.TxOutputPower = "0dBm"
SN.node[**].Communication.Radio.collectTraceInfo = false
SN.node[**].Communication.Radio.module-eventlog-recording = false
 
# ==============================================
# Node: Communication: MAC (Datalink Layer)
# ==============================================
### MAC without overhaead (ideal)
SN.node[**].Communication.MACProtocolName = "TMAC"
SN.node[**].Communication.MAC.macPacketOverhead = 0
SN.node[**].Communication.MAC.maxTxRetries = 20
SN.node[**].Communication.MAC.allowSinkSync = false
#SN.node[**].Communication.MAC.resyncTime = 1 # timer for re-sending SYNC msg, in seconds (standard = 6s)
#SN.node[**].Communication.MAC.waitTimeout = 1 # timeout for expecting a reply to DATA or RTS packet (standard = 5ms)
#SN.node[**].Communication.MAC.listenTimeout = 1 # timeout for TA (Activation event) (standard = 15ms)
#SN.node[**].Communication.MAC.collisionResolution = 1

#Period to proceed with the tranmission
SN.node[**].Communication.MAC.frameTime = 1 # frame time (standard = 610ms)

#Contention period is a random period after every transmit on every node and statistically allows every node equal access to the media
#This parameter has a dependency with the number of data exchanged (iterations & targets): less data --> lower values 
SN.node[**].Communication.MAC.contentionPeriod = 3 #(standard = 10ms, 3-5ms does not give TX failures for iter=20 & targets=8)

#a sufficiently large buffer is needed to tolerate the store of rx data form differnet iterations ( more data to exchange (iterations or targets) --> higher values)  
SN.node[**].Communication.MAC.macBufferSize = 16384

# ==============================================
# Node: Communication: Routing (Network Layer)
# ==============================================
### Routing without overhaead (ideal)
SN.node[**].Communication.Routing.netDataFrameOverhead = 0
SN.node[**].Communication.**.collectTraceInfo = false


# ==================================================
# SPECIFIC TESTS (extending options under [General])
# ==================================================
#basic functionality using ideal comms conditions
[Config TestIdeal]
repeat = 1
sim-time-limit =  40s
SN.numPhysicalProcesses = ${n=4}
SN.physicalProcess[**].random_init = true
SN.physicalProcess[**].random_noise = false
SN.wiseTerrain.gui_wait_start = false
SN.wiseTerrain.gui_show = true
SN.node[**].Application.iter_max = 10
SN.wiseTerrain.draw_trajectory = false
SN.node[**].Application.lambda = 1

#SN.node[**].Application.iter_max = 20
SN.node[**].Application.alpha = 0.3
SN.node[**].Application.collectPowerStats = true

#basic functionality using real comms conditions
[Config TestReal]
repeat = 1
sim-time-limit =  60s
SN.dummy_communication = false
SN.node[**].Application.collectTraceInfo = true
SN.wiseTerrain.gui_wait_start = false
SN.wiseTerrain.gui_show = true
SN.node[**].Application.iter_max =10
SN.node[**].Application.lambda = 1

#test for multiple targets using ideal comms conditions
[Config MTTreal]
repeat = 200
sim-time-limit =  40s
SN.dummy_communication = false    # dummy communication
SN.numPhysicalProcesses = ${n=2,4,6,8,10,12}

SN.physicalProcess[**].random_noise = false
SN.wiseTerrain.gui_wait_start = false
SN.wiseTerrain.gui_show = false
SN.node[**].Application.iter_max = 10
SN.node[**].Communication.MAC.frameTime = 3
SN.node[**].Communication.MAC.contentionPeriod =6
#3-6 works fine for up to 12 targets (no succesful simulation for 14 targets)

#SN.node[**].Application.lambda = 0.5 #~5% clutter
#SN.node[**].Application.lambda = 1 #~10% clutter
#SN.node[**].Application.lambda = 2 #~20% clutter
SN.node[**].Application.lambda = 1

#test for multiple targets using real comms conditions
[Config MTTideal]
repeat = 200
sim-time-limit =  40s
SN.dummy_communication = true    # dummy communication
SN.numPhysicalProcesses = ${n=2,4,6,8,10,12}
SN.physicalProcess[**].random_init = true
SN.physicalProcess[**].random_noise = false
SN.node[**].Application.iter_max = 10

#SN.node[**].Application.lambda = 0.5 #~5% clutter
#SN.node[**].Application.lambda = 1 #~10% clutter
#SN.node[**].Application.lambda = 1 #~10% clutter
SN.node[**].Application.lambda = 2

#test for multiple targets using ideal comms conditions to estimate network lifetime
[Config MTTideal_lifetime]
repeat = 50
sim-time-limit =  25s
SN.dummy_communication = true    # dummy communication
SN.numPhysicalProcesses = ${n=2,4,6,8,10,12}
SN.physicalProcess[**].random_init = true
SN.physicalProcess[**].random_noise = false
SN.node[**].Application.iter_max = 10
SN.node[**].Application.collectPowerStats = true
SN.node[**].Application.collectAccuracyStats = true

#SN.node[**].Application.lambda = 0.5 #~5% clutter
#SN.node[**].Application.lambda = 1 #~10% clutter
SN.node[**].Application.lambda = 1 #~10% clutter

#test for a single target using ideal comms conditions and multiple consensus rounds
[Config IterIdeal]
repeat = 10
SN.dummy_communication = true    # dummy communication
SN.physicalProcess[0].x_init = ${posx=120,350}
SN.physicalProcess[0].y_init = ${posy=100,375}
SN.node[**].Application.iter_max = ${iter=2,4,6,8,10,12,14,16}
SN.node[**].Application.lambda = 1 #~10% clutter

#test for a single target using real comms conditions and multiple consensus rounds
[Config IterReal]
repeat = 10
SN.dummy_communication = false     #false = real wireless channel
SN.physicalProcess[0].x_init = ${posx=120,350}
SN.physicalProcess[0].y_init = ${posy=100,375}
SN.node[**].Application.iter_max = ${iter=2,4,6,8,10,12,14,16}
SN.node[**].Communication.MAC.frameTime = 3
SN.node[**].Communication.MAC.contentionPeriod =6
SN.node[**].Application.lambda = 1 #~10% clutter

#test to simulate target trajectories
[Config simTargets]
repeat = 1
SN.physicalProcess[**].log_enabled = true
SN.physicalProcess[0].x_init = ${posx=120,350}
SN.physicalProcess[0].y_init = ${posy=100,375}
SN.node[**].Application.iter_max = 2

#test for multiple targets using real comms conditions and multiple consensus rounds
[Config delay]
repeat = 50
sim-time-limit =  25s
SN.dummy_communication = false    # dummy communicationccc
SN.numPhysicalProcesses = ${n=2,4,6,8,10,12}
SN.physicalProcess[**].random_init = true
SN.physicalProcess[**].random_noise = false
SN.node[**].Application.iter_max = ${iter=2,4,6,8,10,12,14,16,18,20}
SN.node[**].Communication.MAC.frameTime = 3
SN.node[**].Communication.MAC.contentionPeriod =6