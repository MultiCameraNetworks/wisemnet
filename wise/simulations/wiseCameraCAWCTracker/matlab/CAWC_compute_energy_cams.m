function [res_cams]=CAWC_compute_energy_cams(root_dir,results_dir)
% This script reads the data generated by the app 'wiseCameraCAWcamTrack'
% and computes the following statistics:
%   - Activation times (e.g. load) for sensing, processing & communications
%   - Energy consumption for each second and frame (cameras)
%   
%   Input arguments:
%   - root_dir: location of the root directory with all experiments
%   - results_dir: location of the directory with the selected experiment
%   Example:
%           root_dir='/home/jcs/code/svn/multicamera/wise-mnet/dev/wise/simulations/wiseCameraCAWcamTrack/';
%           experiment='res_P_t09_7fps_25s_r50_o1';
%           res=CAWC_compute_energy(root_dir,experiment,'pets2009_S2_L1',0);
%   
%   Author:      Juan Carlos SanMiguel (juancarlos.sanmiguel@uam.es)
%   Affiliation: University Autonoma of Madrid
%   URL:         http://www-vpu.ii.uam.es/~jcs
%   Date:        November 2015
addpath('./utils');

% check arguments
[root_dir,results_dir]=check_args(root_dir,results_dir);

%% LOAD SIMULATION DATA
fprintf('Loading simulation data...\n');
% try to load mat file
if exist(['./data/' results_dir '.mat'], 'file') == 2
    load(['./data/' results_dir '.mat']);
else    
    [runs,coaData]=load_coa_data([root_dir results_dir]); %coalition tracking data
    [cams.usage,ids,cids]=load_cams_consumption([root_dir results_dir]);%camera consumption
    [Ncams,Nruns,Pclk,Sclk,optF,FPSreq,FPSrea,evalFr] = preprocess_data(cams);
    save(['./data/' results_dir '.mat']);
end

%% VARIABLE INITIALIZATION FOR CAMERA RESOURCES

cam.runs = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq));
cam.simTime = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq));

cam.sen.eAct  = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq)); 
cam.sen.eIdl  = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq)); 
cam.sen.tAct  = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq)); 
cam.sen.totFR = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq));

cam.pro.eAct  = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq)); 
cam.pro.eIdl  = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq)); 
cam.pro.tAct    = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq)); 
cam.pro.misFR  = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq)); 
cam.pro.totFR   = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq));

cam.com.eAct  = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq)); 
cam.com.eIdl  = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq)); 
cam.com.tAct    = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq));
cam.com.tActMax = zeros(Ncams,max(numel(Pclk),numel(optF)),numel(FPSreq));

%% COMPUTE CONSUMPTION OF EACH CAMERA

fprintf('Computing consumption for each camera...\n');
%compute accumulated results of resource consumption
for c=1:Ncams    
    for r=1:Nruns
        %find settings of current experiment
        if numel(Pclk) > numel(optF) 
            ip = find(Pclk==cams.usage{c,r}.PRO.clockfreq); %index for the processing clock
        else
            ip = find(optF==round(cams.usage{c,r}.PRO.optF,3)); %index for the code optimization factor
        end
        
        is = find(FPSreq==cams.usage{c,r}.SEN.FPSreq);  %index for the fps of sensing
        
        cam.runs(c,ip,is) = cam.runs(c,ip,is)+1;
        cam.simTime(c,ip,is) = cam.simTime(c,ip,is) + max(cams.usage{c,r}.t_sim);  
            
        %SENSING
        indS = find(cams.usage{c,r}.SEN.eAct > 0);%indexes for data of 'sensing' module
        cam.sen.totFR(c,ip,is) = cam.sen.totFR(c,ip,is) + numel(indS); %number of frames analized        
        
        cam.sen.eAct(c,ip,is) = cam.sen.eAct(c,ip,is) + sum(cams.usage{c,r}.SEN.eAct(indS)); %sensing energy active
        cam.sen.eIdl(c,ip,is) = cam.sen.eIdl(c,ip,is) + sum(cams.usage{c,r}.SEN.eIdl(indS)); %sensing energy idle                
        cam.sen.tAct(c,ip,is) = cam.sen.tAct(c,ip,is) + sum(size(cams.usage{c,r}.SEN.eAct,1)*cams.usage{c,r}.SEN.Tact); %sensing activation time
        cam.sen.tAct(c,ip,is) = cam.sen.tAct(c,ip,is) + sum(numel(indS)*cams.usage{c,r}.SEN.Tact); %sensing activation time
                
        %PROCESSING
        indP = find(cams.usage{c,r}.PRO.eAct > 0); %indexes for data of 'processing' module        
        cam.pro.totFR(c,ip,is) = cam.pro.totFR(c,ip,is) + numel(indP); %number of frames analized
                
        cam.pro.eAct(c,ip,is) = cam.pro.eAct(c,ip,is) + sum(cams.usage{c,r}.PRO.eAct(indP)); %processing energy active
        cam.pro.eIdl(c,ip,is) = cam.pro.eIdl(c,ip,is) + sum(cams.usage{c,r}.PRO.eIdl(indP)); %processing energy idle        
        cam.pro.tAct(c,ip,is) = cam.pro.tAct(c,ip,is) + sum(cams.usage{c,r}.PRO.TimeO(indP)*1e-3); %processing activation time        
        cam.pro.misFR(c,ip,is) = cam.pro.misFR(c,ip,is) + abs(numel(indP)-numel(indS)); %missed frames
        
        %COMMUNICATION      
        cams.usage{c,r}.COM.eAct = cams.usage{c,r}.COM.eActTX + cams.usage{c,r}.COM.eActRX; %energy tx+rx
        cam.com.eAct(c,ip,is) = cam.com.eAct(c,ip,is) + sum(cams.usage{c,r}.COM.eAct(indP)); %communication energy active        
        cam.com.eIdl(c,ip,is) = cam.com.eIdl(c,ip,is) + sum(cams.usage{c,r}.COM.eIdl(indP)); %communication energy idle
       
        %communication activation time        
        allocByteRate = 250000/8 * 1/cams.usage{c,r}.SEN.FPSreq;%bitrate in bytes/sec        
        totBytes = cams.usage{c,r}.COM.TXdone(indP)+cams.usage{c,r}.COM.RXdone(indP); %total tx/rx bits
        cam.com.tActMax(c,ip,is) = cam.com.tActMax(c,ip,is) + max(totBytes/allocByteRate);         
        cam.com.tAct(c,ip,is) = cam.com.tAct(c,ip,is) + sum(totBytes/allocByteRate)*1/cams.usage{c,r}.SEN.FPSreq; 
        
        if any(totBytes/allocByteRate > 1) || sum(totBytes/allocByteRate)>max(cams.usage{c,r}.t_sim)
            a=1;
        end
    end
end

%average by the number of runs
cam.sen.tAct = cam.sen.tAct./cam.runs;
cam.sen.eAct = cam.sen.eAct./cam.runs;
cam.sen.eIdl = cam.sen.eIdl./cam.runs;
cam.pro.tAct = cam.pro.tAct./cam.runs;
cam.pro.eAct = cam.pro.eAct./cam.runs;
cam.pro.eIdl = cam.pro.eIdl./cam.runs;
cam.pro.misFR = cam.pro.misFR./cam.runs;
cam.com.eAct = cam.com.eAct./cam.runs;
cam.com.eIdl = cam.com.eIdl./cam.runs;
cam.com.tAct = cam.com.tAct./cam.runs;
cam.com.tActMax = cam.com.tActMax./cam.runs;
cam.simTime = cam.simTime./cam.runs;
cam.sen.totFR = cam.sen.totFR./cam.runs;
cam.pro.totFR = cam.pro.totFR./cam.runs;

%consumption per frame
%cam.sen.eAct_fr = coa.sen.tAct./coa.sen.totFR;

%consumption per second
%cam.sen.eAct_sec = coa.sen.tAct./cam.time;
    
%% SAVE RESULTS
fprintf('Data saved to %s\n',['./data/' results_dir '_Resources.mat']);
res_cams = struct('root_dir',root_dir,'results_dir',results_dir,'cids',cids,...
             'Ncams',Ncams,'Nruns',Nruns,'fps',FPSreq,'Sclk',Sclk,'Pclk',Pclk,'optF',optF,'cam',cam);
save(['./data/' results_dir '_EnergyCams.mat'],'res_cams');
        
function [root_dir,results_dir,cam2show]=check_args(root_dir,results_dir)
    % default values
    if exist('root_dir') == 0 || exist('results_dir') == 0
        root_dir = '/home/jcs/code/svn/multicamera/wise-mnet/dev/wise/simulations/wiseCameraCAWcamTrack/';
        results_dir = 'res_P_t09_7fps_25s_r50_o1';
    end