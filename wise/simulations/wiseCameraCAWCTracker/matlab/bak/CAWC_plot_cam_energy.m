% function []=CAWC_plot_cam_energy()
% This script reads the data generated by the app 'wiseCameraCAWCTracker'
% and computes the following statistics:
%   - Visualization of the energy consumption for a selected camera showing
%   statistics of sensing, processing & communications
%   - Energy consumption is presented for each second and frame
%
%
%   Author:      Juan Carlos SanMiguel (juancarlos.sanmiguel@uam.es)
%   Affiliation: University Autonoma of Madrid
%   URL:         http://www-vpu.ii.uam.es/~jcs
%   Date:        September 2015

clc; clear all; close all;
addpath('./utils');

%% LOAD & PREPROCESS DATA
dataDir = '/home/jcs/code/svn/multicamera/wise-mnet/dev/wise/simulations/wiseCameraCAWCTracker/res';
dataDir = '/home/jcs/code/svn/multicamera/wise-mnet/dev/wise/simulations/wiseCameraCAWCTracker/res_SP_t09_5s_r50_f4';
% dataDir = '/home/jcs/code/svn/multicamera/wise-mnet/dev/wise/simulations/wiseCameraCAWCTracker/res_S_t09_5s_r50_f4';

[cams.track,ids,cids]=load_cams_data(dataDir);
[cams.usage,ids,cids]=load_cams_consumption(dataDir);
[Ncams,Nruns,PROclk,SENclk,optFactor,SENfps_req,SENfps_rea,comparedFrames] = preprocess_data(cams);

%% COMPUTE ENERGY STATISTICS
en.SENact = zeros(numel(PROclk), numel(SENfps_req)); 
en.SENidl = zeros(numel(PROclk), numel(SENfps_req)); 
en.SEN_r = zeros(numel(PROclk), numel(SENfps_req));
en.PROact = zeros(numel(PROclk), numel(SENfps_req)); 
en.PROidl = zeros(numel(PROclk), numel(SENfps_req)); 
en.PRO_r = zeros(numel(PROclk), numel(SENfps_req));
en.COMact = zeros(numel(PROclk), numel(SENfps_req)); 
en.COMidl = zeros(numel(PROclk), numel(SENfps_req)); 
en.COM_r = zeros(numel(PROclk), numel(SENfps_req));
en.steps = zeros(numel(PROclk), numel(SENfps_req)); 
en.time = zeros(numel(PROclk), numel(SENfps_req));

%selected camera to plot results
c=1;
for r=1:size(cams.usage,2)
        
    %find sen&pro clos
    curPROclk = cams.usage{c,r}.PRO.clockfreq;
    curSENclk = cams.usage{c,r}.SEN.clockfreq;
    curSENfps = cams.usage{c,r}.SEN.FPSrea;

    ip = find(PROclk==curPROclk);
    is = find(SENfps_req==curSENfps);
    
    ind = find(cams.usage{c,r}.SEN.eAct > 0);
    en.SENact(ip,is) = en.SENact(ip,is) + sum(cams.usage{c,r}.SEN.eAct(ind)); 
    en.SENidl(ip,is) = en.SENidl(ip,is) + sum(cams.usage{c,r}.SEN.eIdl(ind)); 
    en.SEN_r(ip,is) = en.SEN_r(ip,is)+1;
    en.SEN.steps(ip,is) = numel(ind);
    
    ind = find(cams.usage{c,r}.PRO.eAct > 0);
    en.PROact(ip,is) = en.PROact(ip,is) + sum(cams.usage{c,r}.PRO.eAct(ind)); 
    en.PROidl(ip,is) = en.PROidl(ip,is) + sum(cams.usage{c,r}.PRO.eIdl(ind)); 
    en.PRO_r(ip,is) = en.PRO_r(ip,is)+1;
    en.PRO.steps(ip,is) = numel(ind);
    
    cams.usage{c,r}.COM.eAct = cams.usage{c,r}.COM.eActTX + cams.usage{c,r}.COM.eActRX;    
    ind = find(cams.usage{c,r}.COM.eAct > 0);
    en.COMact(ip,is) = en.COMact(ip,is) + sum(cams.usage{c,r}.COM.eAct(ind)); 
    en.COMidl(ip,is) = en.COMidl(ip,is) + sum(cams.usage{c,r}.COM.eIdl(ind)); 
    en.COM_r(ip,is) = en.COM_r(ip,is)+1;
    
    en.COM.steps(ip,is) = numel(ind);
    en.time(ip,is) = max(cams.usage{c,r}.t_sim);
end

%normalization by the number of runs
en.SENact = en.SENact./en.SEN_r;
en.SENidl = en.SENidl./en.SEN_r;
en.PROact = en.PROact./en.PRO_r;
en.PROidl = en.PROidl./en.PRO_r;
en.COMact = en.COMact./en.COM_r;
en.COMidl = en.COMidl./en.COM_r;

%% PLOT SENSING-VS-PROCESSING FOR COALITION CAMERAS
rot_angle1 = 0; rot_angle2 = 0;
[N,M]=meshgrid(SENfps_req,PROclk);
for i=1:2
    h(i)=figure('Name',sprintf('Active state/Idle state consumption for camera %03d',c));
    
    switch i
        case 1
            variable1 = en.time;
            variable2 = en.time;
            variable3 = en.time;
            zlab = 'Consumption (mJ/s)';
            limits = [SENfps_req(1) SENfps_req(end) PROclk(1) PROclk(end) 0 500];
        case 2
            variable1 = en.SEN.steps;
            variable2 = en.PRO.steps;
            variable3 = en.COM.steps;
            zlab = 'Consumption (mJ/frame)';
            limits = [SENfps_req(1) SENfps_req(end) PROclk(1) PROclk(end) 0 20];            
    end
    
    subplot 231; mesh(N,M,en.SENact./variable1); plot_labels_axis('Sensing - Active state',zlab,PROclk,SENfps_req); %axis(limits);
    subplot 232; mesh(N,M,en.PROact./variable2); plot_labels_axis('Processing - Active state',zlab,PROclk,SENfps_req);%axis(limits);
    subplot 233; mesh(N,M,en.COMact./variable3); plot_labels_axis('Comms - Active state',zlab,PROclk,SENfps_req);%axis(limits);
    subplot 234; mesh(N,M,en.SENidl./variable1); plot_labels_axis('Sensing - Idle state',zlab,PROclk,SENfps_req);%axis(limits);
    subplot 235; mesh(N,M,en.PROidl./variable2); plot_labels_axis('Processing - Idle state',zlab,PROclk,SENfps_req);%axis(limits);
    subplot 236; mesh(N,M,en.COMidl./variable3); plot_labels_axis('Comms - Idle state',zlab,PROclk,SENfps_req);%axis(limits);
       
%     subaxis(2,3,1, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', 0.05,'MarginRight', 0); 
%     imagesc(en.SENact./variable); colorbar;axis tight; plot_labels_axis('Sensing - Active state',zlab,PROclk,SENfps_req);    
%     subaxis(2,3,2, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', 0.05,'MarginRight', 0); 
%     imagesc(en.PROact./variable); colorbar;axis tight; plot_labels_axis('Processing - Active state',zlab,PROclk,SENfps_req);    
%     subaxis(2,3,3, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', 0.05,'MarginRight', 0); 
%     imagesc(en.COMact./variable); colorbar;axis tight; plot_labels_axis('Comms - Active state',zlab,PROclk,SENfps_req);    
%     subaxis(2,3,4, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', 0.05,'MarginRight', 0); 
%     imagesc(en.SENidl./variable); colorbar;axis tight; plot_labels_axis('Sensing - Idle state',zlab,PROclk,SENfps_req);    
%     subaxis(2,3,5, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', 0.05,'MarginRight', 0); 
%     imagesc(en.PROidl./variable); colorbar;axis tight; plot_labels_axis('Processing - Idle state',zlab,PROclk,SENfps_req);    
%     subaxis(2,3,6, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', 0.05,'MarginRight', 0); 
%     imagesc(en.COMidl./variable); colorbar;axis tight; plot_labels_axis('Comms - Idle state',zlab,PROclk,SENfps_req);    
end

%% Plot combined mJ/s and mJ/frame
fighandl=figure('Name',sprintf('Accumulated consumption for camera %03d',c),'Position', [100, 100, 1800, 1000]);
% screen_size = get(0, 'ScreenSize');
% set(gcf, 'Position', [0 0 screen_size(3) screen_size(4) ] );
  
[N,M]=meshgrid(SENfps_req,PROclk);
ml = 0.05;
pd = 0.05;
sp = 0.05;
for i=1:2    
    
    switch i
         case 1
            variable1 = en.time;
            variable2 = en.time;
            variable3 = en.time;
            zlab = 'Consumption (mJ/s)';
            limits = [SENfps_req(1) SENfps_req(end) PROclk(1) PROclk(end) 0 650];
        case 2
            variable1 = en.SEN.steps;
            variable2 = en.PRO.steps;
            variable3 = en.COM.steps;
            zlab = 'Consumption (mJ/frame)';
            limits = [SENfps_req(1) SENfps_req(end) PROclk(1) PROclk(end) 0 40];             
    end
    
    subaxis(2,3,(i-1)*3+1, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', ml,'MarginRight', ml); 
    mesh(N,M,(en.SENact+en.SENidl)./variable1); plot_labels_axis('Sensing',zlab,PROclk,SENfps_req); axis(limits);    
    %     imagesc((en.SENact+en.SENidl)./variable); colorbar;axis tight; plot_labels_axis('Sensing',zlab,PROclk,SENfps_req);    
    
    subaxis(2,3,(i-1)*3+2, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', ml,'MarginRight', ml); 
    mesh(N,M,(en.PROact+en.PROidl)./variable2); plot_labels_axis('Processing',zlab,PROclk,SENfps_req);axis(limits);
    %     imagesc((en.PROact+en.PROidl)./variable); colorbar;axis tight; plot_labels_axis('Processing',zlab,PROclk,SENfps_req);   
    
    subaxis(2,3,(i-1)*3+3, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', ml,'MarginRight', ml/2);         
    mesh(N,M,(en.COMact+en.COMidl)./variable3); plot_labels_axis('Comms',zlab,PROclk,SENfps_req);axis(limits);         
    %     imagesc((en.COMact+en.COMidl)./variable); colorbar;axis tight; plot_labels_axis('Communications',zlab,PROclk,SENfps_req);   
end


%% Plot combined mJ/s and mJ/frame
fighandl=figure('Name',sprintf('Overview consumption for camera %03d',c),'Position', [100, 100, 1400, 1200]);
% screen_size = get(0, 'ScreenSize');
% set(gcf, 'Position', [0 0 screen_size(3) screen_size(4) ] );
  
[N,M]=meshgrid(SENfps_req,PROclk);
ml = 0.05;
pd = 0.05;
sp = 0.05;
zlab = 'Consumption (mJ/s)';
limits = [SENfps_req(1) SENfps_req(end) PROclk(1) PROclk(end) 0 650];
%Active state
subaxis(3,3,1, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', ml,'MarginRight', ml); 
mesh(N,M,(en.SENact)./en.time); plot_labels_axis('Sensing - Active state',zlab,PROclk,SENfps_req); 
subaxis(3,3,2, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', 2*ml,'MarginRight', ml); 
mesh(N,M,(en.PROact)./en.time); plot_labels_axis('Processing - Active state',zlab,PROclk,SENfps_req);axis(limits); 
subaxis(3,3,3, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', 2*ml,'MarginRight', ml/2);         
mesh(N,M,(en.COMact)./en.time); plot_labels_axis('Comms - Active state',zlab,PROclk,SENfps_req);

%Idle state
subaxis(3,3,4, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', ml,'MarginRight', ml); 
mesh(N,M,(en.SENidl)./en.time); plot_labels_axis('Sensing - Idle state',zlab,PROclk,SENfps_req);
axis ([SENfps_req(1) SENfps_req(end) PROclk(1) PROclk(end) min(min(en.SENidl./en.time)) max(max(en.SENidl./en.time))]);
subaxis(3,3,5, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', 2*ml,'MarginRight', ml); 
mesh(N,M,(en.PROidl)./en.time); plot_labels_axis('Processing - Idle state',zlab,PROclk,SENfps_req);
axis ([SENfps_req(1) SENfps_req(end) PROclk(1) PROclk(end)  min(min(en.PROidl./en.time)) max(max(en.PROidl./en.time))]);
subaxis(3,3,6, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', ml,'MarginRight', ml/2);         
mesh(N,M,(en.COMidl)./en.time); plot_labels_axis('Comms - Idle state',zlab,PROclk,SENfps_req);

%total
subaxis(3,3,7, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', ml,'MarginRight', ml); 
mesh(N,M,(en.SENact+en.SENidl)./en.time); plot_labels_axis('Sensing - Both states',zlab,PROclk,SENfps_req); axis(limits);    
subaxis(3,3,8, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', 2*ml,'MarginRight', ml); 
mesh(N,M,(en.PROact+en.PROidl)./en.time); plot_labels_axis('Processing - Both states',zlab,PROclk,SENfps_req);axis(limits);
subaxis(3,3,9, 'Spacing', sp, 'PaddingBottom', pd, 'MarginLeft', 2*ml,'MarginRight', ml/2);         
mesh(N,M,(en.COMact+en.COMidl)./en.time); plot_labels_axis('Comms - Both states',zlab,PROclk,SENfps_req);axis(limits);  

saveas(fighandl, sprintf('figs/camera%d_energy_states.eps',c),'epsc'); saveas(fighandl, sprintf('figs/camera%d_energy_states.fig',c));


%% Plot combined mJ/s and mJ/frame
[N,M]=meshgrid(SENfps_req,PROclk);
zlab = 'Consumption (mJ/s)';  
limits = [SENfps_req(1) SENfps_req(end) PROclk(1) PROclk(end) 0 650];

fighandl=figure('Name',sprintf('Overview consumption for camera %03d - sensing - active',c));
mesh(N,M,(en.SENact)./en.time); plot_labels_axis('Sensing - Active state',zlab,PROclk,SENfps_req); 
saveas(fighandl, sprintf('figs/camera%d_energy_states_sen_active.eps',c),'epsc');

fighandl=figure('Name',sprintf('Overview consumption for camera %03d - processing - active',c));
mesh(N,M,(en.PROact)./en.time); plot_labels_axis('Processing - Active state',zlab,PROclk,SENfps_req);axis(limits); 
saveas(fighandl, sprintf('figs/camera%d_energy_states_pro_active.eps',c),'epsc');

fighandl=figure('Name',sprintf('Overview consumption for camera %03d - comm - active',c));
mesh(N,M,(en.COMact)./en.time); plot_labels_axis('Comms - Active state',zlab,PROclk,SENfps_req);
saveas(fighandl, sprintf('figs/camera%d_energy_states_com_active.eps',c),'epsc');

%Idle state
fighandl=figure('Name',sprintf('Overview consumption for camera %03d - sensing - idle',c));
mesh(N,M,(en.SENidl)./en.time); plot_labels_axis('Sensing - Idle state',zlab,PROclk,SENfps_req);
axis ([SENfps_req(1) SENfps_req(end) PROclk(1) PROclk(end) min(min(en.SENidl./en.time)) max(max(en.SENidl./en.time))]);
saveas(fighandl, sprintf('figs/camera%d_energy_states_sen_idle.eps',c),'epsc');

fighandl=figure('Name',sprintf('Overview consumption for camera %03d - pro - idle',c));
mesh(N,M,(en.PROidl)./en.time); plot_labels_axis('Processing - Idle state',zlab,PROclk,SENfps_req);
axis ([SENfps_req(1) SENfps_req(end) PROclk(1) PROclk(end)  min(min(en.PROidl./en.time)) max(max(en.PROidl./en.time))]);
saveas(fighandl, sprintf('figs/camera%d_energy_states_pro_idle.eps',c),'epsc');

fighandl=figure('Name',sprintf('Overview consumption for camera %03d - comms - idle',c));
mesh(N,M,(en.COMidl)./en.time); plot_labels_axis('Comms - Idle state',zlab,PROclk,SENfps_req);
saveas(fighandl, sprintf('figs/camera%d_energy_states_com_idle.eps',c),'epsc');

%total
fighandl=figure('Name',sprintf('Overview consumption for camera %03d - sensing - both',c));
mesh(N,M,(en.SENact+en.SENidl)./en.time); plot_labels_axis('Sensing - Both states',zlab,PROclk,SENfps_req); axis(limits);    
saveas(fighandl, sprintf('figs/camera%d_energy_states_sen_both.eps',c),'epsc');

fighandl=figure('Name',sprintf('Overview consumption for camera %03d - pro - both',c));
mesh(N,M,(en.PROact+en.PROidl)./en.time); plot_labels_axis('Processing - Both states',zlab,PROclk,SENfps_req);axis(limits);
saveas(fighandl, sprintf('figs/camera%d_energy_states_pro_both.eps',c),'epsc');

fighandl=figure('Name',sprintf('Overview consumption for camera %03d - comm - both',c));
mesh(N,M,(en.COMact+en.COMidl)./en.time); plot_labels_axis('Comms - Both states',zlab,PROclk,SENfps_req);axis(limits);  
saveas(fighandl, sprintf('figs/camera%d_energy_states_com_both.eps',c),'epsc');

 
%% SAVE DATA
ENE.Ncams = Ncams;
ENE.Nruns = Nruns;
ENE.dataSEN = (en.SENact+en.SENidl)./en.time;
ENE.dataPRO = (en.PROact+en.PROidl)./en.time;
ENE.dataCOM = (en.COMact+en.COMidl)./en.time;
ENE.fps = SENfps_req;
ENE.clk = PROclk;       
save figs/CameraEnergy.mat ENE;
        