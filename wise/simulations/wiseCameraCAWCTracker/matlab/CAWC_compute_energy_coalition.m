function [res_coa]=CAWC_compute_energy_coalition(root_dir,results_dir)
% This script reads the data generated by the app 'wiseCameraCAWcamTrack'
% and computes the following statistics:
%   - Activation times (e.g. load) for sensing, processing & communications
%   - Energy consumption for each second and frame (cameras)
%
%   Input arguments:
%   - root_dir: location of the root directory with all experiments
%   - results_dir: location of the directory with the selected experiment
%   Example:
%           root_dir='/home/jcs/code/svn/multicamera/wise-mnet/dev/wise/simulations/wiseCameraCAWcamTrack/';
%           experiment='res_P_t09_7fps_25s_r50_o1';
%           res=CAWC_compute_energy(root_dir,experiment,'pets2009_S2_L1',0);
%
%   Author:      Juan Carlos SanMiguel (juancarlos.sanmiguel@uam.es)
%   Affiliation: University Autonoma of Madrid
%   URL:         http://www-vpu.ii.uam.es/~jcs
%   Date:        November 2015
addpath('./utils');

% check arguments
[root_dir,results_dir]=check_args(root_dir,results_dir);

%% LOAD SIMULATION DATA
fprintf('Loading simulation data...\n');
% try to load mat file
if exist(['./data/' results_dir '.mat'], 'file') == 2
    load(['./data/' results_dir '.mat']);
else    
    [runs,coaData]=load_coa_data([root_dir results_dir]); %coalition tracking data
    [cams.track,ids,cids]=load_cams_data([root_dir results_dir]); %camera tracking data
    [cams.usage,ids,cids]=load_cams_consumption([root_dir results_dir]);%camera consumption
    [Ncams,Nruns,Pclk,Sclk,optF,FPSreq,FPSrea,evalFr] = preprocess_data(cams);
    save(['./data/' results_dir '.mat']);
end

%% VARIABLE INITIALIZATION FOR COALITION RESOURCES
coa.Nsize   = cell(numel(coaData),numel(Pclk),numel(FPSreq));
coa.Ncoa    = zeros(numel(Pclk),numel(FPSreq));
coa.runs    = zeros(numel(Pclk),numel(FPSreq));
coa.totFR   = zeros(numel(Pclk),numel(FPSreq));
coa.simTime = zeros(numel(Pclk),numel(FPSreq));

coa.sen.eAct = zeros(numel(Pclk),numel(FPSreq)); %average energy for 'active' sensing of coalition cameras
coa.sen.eIdl = zeros(numel(Pclk),numel(FPSreq)); %average energy for 'idle' sensing of coalition cameras
coa.sen.eTot = zeros(numel(Pclk),numel(FPSreq)); %accumulated energy for 'active+idle' sensing of coalition cameras
coa.pro.eAct = zeros(numel(Pclk),numel(FPSreq));
coa.pro.eCol = zeros(numel(Pclk),numel(FPSreq));
coa.pro.eIdl = zeros(numel(Pclk),numel(FPSreq));
coa.pro.eTot = zeros(numel(Pclk),numel(FPSreq));
coa.com.eAct = zeros(numel(Pclk),numel(FPSreq));
coa.com.eIdl = zeros(numel(Pclk),numel(FPSreq));
coa.com.eTot = zeros(numel(Pclk),numel(FPSreq));
coa.com.bAcc = zeros(numel(Pclk),numel(FPSreq)); %accumulated bits by all coalition cameras
    
%accumulators for all data (coaliion camera and managers)
% this accumulators are useful when data corresponds to one configuration
coa.sen.eAct_acc = [];
coa.sen.eIdl_acc = [];
coa.pro.eAct_acc = [];
coa.pro.eCol_acc = [];
coa.pro.eIdl_acc = [];
coa.com.eAct_acc = [];
coa.com.eIdl_acc = [];

coa.man.sen.eAct_acc = [];
coa.man.sen.eIdl_acc = [];
coa.man.pro.eAct_acc = [];
coa.man.pro.eCol_acc = [];
coa.man.pro.eIdl_acc = [];
coa.man.com.eAct_acc = [];
coa.man.com.eIdl_acc = [];

%% COMPUTE CONSUMPTION OF EACH CAMERA
fprintf('Computing consumption for the coalition...\n');
%compute accumulated results of resource consumption
for tt=1:numel(coaData)
    
    %find settings of current experiment
    r = find (runs == coaData(tt).run);%current run     
    ip = find(Pclk==cams.usage{1,r}.PRO.clockfreq); %index for the processing clock
    is = find(FPSreq==cams.usage{1,r}.SEN.FPSreq);  %index for the fps of sensing
    
    %accumulators for the average consumption of coalition cameras
    acc.mSENa=[]; acc.mSENi=[]; acc.mPROa=[];acc.mPROi=[];acc.mCOLa=[];acc.mCOMa=[];acc.mCOMi=[];
    acc.mSEN=[]; acc.mPRO=[];acc.mCOM=[];
    acc.tSEN=[];acc.tPRO=[];acc.tCOM=[];acc.timeCOMa=[];
    acc.man.mSENa=[]; acc.man.mSENi=[]; acc.man.mPROa=[];acc.man.mPROi=[];acc.man.mCOLa=[];acc.man.mCOMa=[];acc.man.mCOMi=[];acc.man.timeCOMa=[];
    
    steps = size(coaData(tt).data,2); %number of steps where there is coalition
    %compute average consumption of coalition cameras
    for n=2:steps-2
        
        if (size(coaData(tt).data(n),1)*size(coaData(tt).data(n),2) > 1)
            error('There should be only one sample to analize!!')
        end
        frameID = coaData(tt).data(n).frameID;%frame analyzed
        CoaCams = coaData(tt).data(n).cam{1}; %coalition cameras
        
        if ~isnan(CoaCams)
            
            %accumulate consumption of coalition cameras
            tmp00=[];tmp01=[];tmp10=[];tmp11=[];tmp12=[];tmp20=[];tmp21=[];tmp22=[];tmp23=[];tmp24=[];
            for i=1:numel(CoaCams)
                p = find (ids == CoaCams(i));
                fr = find (cams.usage{p,r}.frID == frameID);
                
                k=0;
                while isempty(fr)
                    k=k+1;
                    fr = find (cams.usage{p,r}.frID+k == frameID);
                end
                
                %due to different processing times, there is desynchronization
                %and therefore, not all cameras provide results for the same
                %frame. Here we take the times for the previous frame analyzed
                while (cams.usage{p,r}.COM.eIdl(fr) < 0)
                    fr = fr - 1;
                end
                tmp00 = [tmp00 cams.usage{p,r}.SEN.eAct(fr)];
                tmp01 = [tmp01 cams.usage{p,r}.SEN.eIdl(fr)];
                tmp10 = [tmp10 cams.usage{p,r}.PRO.eAct(fr)];
                tmp11 = [tmp11 cams.usage{p,r}.PRO.eCol(fr)];
                tmp12 = [tmp12 cams.usage{p,r}.PRO.eIdl(fr)];
                tmp20 = [tmp20 cams.usage{p,r}.COM.eActTX(fr)];
                tmp21 = [tmp21 cams.usage{p,r}.COM.eActRX(fr)];
                tmp22 = [tmp22 cams.usage{p,r}.COM.eIdl(fr)];
                tmp23 = [tmp23 cams.usage{p,r}.COM.TXdone(fr)];
                tmp24 = [tmp24 cams.usage{p,r}.COM.RXdone(fr)];
            end
            
            %accumulate the average consumption of coalition cameras 
            %for active/idle states
            acc.mSENa = [acc.mSENa mean(tmp00)];
            acc.mSENi = [acc.mSENi mean(tmp01)];
            acc.mPROa = [acc.mPROa mean(tmp10)];
            acc.mCOLa = [acc.mPROi mean(tmp11)];
            acc.mPROi = [acc.mPROi mean(tmp12)];
            acc.mCOMa = [acc.mCOMa mean(tmp20(:)+tmp21(:))];
            acc.mCOMi = [acc.mCOMi mean(tmp22)];
            
            %accumulate the average and total consumption 
            %of coalition cameras for active+idle states
            acc.tSEN = [acc.tSEN sum(tmp00+tmp01)];
            acc.mSEN = [acc.mSEN mean(tmp00+tmp01)];
            acc.tPRO = [acc.tPRO sum(tmp10+tmp11+tmp12)];
            acc.mPRO = [acc.mPRO mean(tmp10+tmp11+tmp12)];
            acc.tCOM = [acc.tCOM sum(tmp20+tmp21+tmp22)];
            acc.mCOM = [acc.mCOM mean(tmp20+tmp21+tmp22)];
            allocBitrate = 250000*1/cams.usage{1,r}.SEN.FPSreq;
            acc.timeCOMa = [acc.timeCOMa sum(tmp23+tmp24)/allocBitrate];
            
            coa.Ncoa(ip,is) = coa.Ncoa(ip,is)+1;            
            coa.Nsize(r,ip,is) = {[coa.Nsize{r,ip,is} numel(CoaCams)]};
            
            %fprintf('\ttt=%03d s=%03d: NCams=%d sen=%.2f pro=%.2f com=%.2f\n',tt,n,numel(CoaCams),sum(tmp00+tmp01)/numel(CoaCams), sum(tmp10+tmp11)/numel(CoaCams), sum(tmp20+tmp21+tmp22)/numel(CoaCams));
        else
            fprintf('run=%d step=%d -> Empty coalition\n',tt,n);
        end
        
        %manager ID index        
        pm = find (ids == coaData(tt).data(n).man);
        
        %accumulate manager data
        acc.man.mSENa = [acc.man.mSENa cams.usage{pm,r}.SEN.eAct(fr)];
        acc.man.mSENi = [acc.man.mSENi cams.usage{pm,r}.SEN.eIdl(fr)];
        acc.man.mPROa = [acc.man.mPROa cams.usage{pm,r}.PRO.eAct(fr)];
        acc.man.mCOLa = [acc.man.mCOLa cams.usage{pm,r}.PRO.eCol(fr)];
        acc.man.mPROi = [acc.man.mPROi cams.usage{pm,r}.PRO.eIdl(fr)];
        acc.man.mCOMa = [acc.man.mCOMa cams.usage{pm,r}.COM.eActTX(fr)+cams.usage{pm,r}.COM.eActRX(fr)];
        acc.man.mCOMi = [acc.man.mCOMi cams.usage{pm,r}.COM.eIdl(fr)];        
        acc.man.timeCOMa = [acc.timeCOMa 1/cams.usage{1,r}.SEN.FPSreq*(cams.usage{pm,r}.COM.TXdone(fr)+cams.usage{pm,r}.COM.RXdone(fr))/allocBitrate];
    end       
    
    %average consumption
    coa.sen.eAct(ip,is) = coa.sen.eAct(ip,is) + sum(acc.mSENa);
    coa.sen.eIdl(ip,is) = coa.sen.eIdl(ip,is) + sum(acc.mSENi);
    coa.pro.eAct(ip,is) = coa.pro.eAct(ip,is) + sum(acc.mPROa);
    coa.pro.eCol(ip,is) = coa.pro.eCol(ip,is) + sum(acc.mCOLa);
    coa.pro.eIdl(ip,is) = coa.pro.eIdl(ip,is) + sum(acc.mPROi);
    coa.com.eAct(ip,is) = coa.com.eAct(ip,is) + sum(acc.mCOMa);
    coa.com.eIdl(ip,is) = coa.com.eIdl(ip,is) + sum(acc.mCOMi);
    
    %accumulated consumption
    coa.sen.eTot(ip,is) = coa.sen.eTot(ip,is) + sum(acc.tSEN);
    coa.pro.eTot(ip,is) = coa.pro.eTot(ip,is) + sum(acc.tPRO);
    coa.com.eTot(ip,is) = coa.com.eTot(ip,is) + sum(acc.tCOM);
    coa.com.bAcc(ip,is) = coa.com.bAcc(ip,is) + mean(acc.timeCOMa);

    coa.runs(ip,is)     = coa.runs(ip,is)+1;
    coa.simTime(ip,is)  = coa.simTime(ip,is)+max(cams.usage{1,r}.t_sim);
    coa.totFR(ip,is)    = coa.totFR(ip,is) + steps;    
    
    %accumulate all data for cameras
    coa.sen.eAct_acc = [coa.sen.eAct_acc acc.mSENa];
    coa.sen.eIdl_acc = [coa.sen.eIdl_acc acc.mSENi];
    coa.pro.eAct_acc = [coa.pro.eAct_acc acc.mPROa];
    coa.pro.eCol_acc = [coa.pro.eCol_acc acc.mCOLa];
    coa.pro.eIdl_acc = [coa.pro.eIdl_acc acc.mPROi];
    coa.com.eAct_acc = [coa.com.eAct_acc acc.mCOMa];
    coa.com.eIdl_acc = [coa.com.eIdl_acc acc.mCOMi];    
    
    %accumulate all data for the manager
    coa.man.sen.eAct_acc = [coa.man.sen.eAct_acc acc.man.mSENa];
    coa.man.sen.eIdl_acc = [coa.man.sen.eIdl_acc acc.man.mSENi];
    coa.man.pro.eAct_acc = [coa.man.pro.eAct_acc acc.man.mPROa];
    coa.man.pro.eCol_acc = [coa.man.pro.eCol_acc acc.man.mCOLa];
    coa.man.pro.eIdl_acc = [coa.man.pro.eIdl_acc acc.man.mPROi];
    coa.man.com.eAct_acc = [coa.man.com.eAct_acc acc.man.mCOMa];
    coa.man.com.eIdl_acc = [coa.man.com.eIdl_acc acc.man.mCOMi];    
end

%normalize results by the number of runs
%average by the number of runs
coa.sen.eAct = coa.sen.eAct./coa.runs;
coa.sen.eIdl = coa.sen.eIdl./coa.runs;
coa.sen.eTot = coa.sen.eTot./coa.runs;
coa.pro.eAct = coa.pro.eAct./coa.runs;
coa.pro.eIdl = coa.pro.eIdl./coa.runs;
coa.pro.eTot = coa.pro.eTot./coa.runs;
coa.com.eAct = coa.com.eAct./coa.runs;
coa.com.eIdl = coa.com.eIdl./coa.runs;
coa.com.eTot = coa.com.eTot./coa.runs;
coa.com.bAcc = coa.com.bAcc./coa.runs;
coa.simTime = coa.simTime./coa.runs;

%consumption per frame
%coa.sen.eAct_fr = coa.sen.tAct./coa.sen.totFR;

%consumption per second
%coa.sen.eAct_sec = coa.sen.tAct./coa.time;

%% SAVE RESULTS
fprintf('Data saved to %s\n',['./data/' results_dir '_Resources.mat']);
res_coa = struct('root_dir',root_dir,'results_dir',results_dir,'cids',cids,...
    'Ncams',Ncams,'Nruns',Nruns,'fps',FPSreq,'Pclk',Pclk,'coa',coa);
save(['./data/' results_dir '_EnergyCoa.mat'],'res_coa');


function [root_dir,results_dir,cam2show]=check_args(root_dir,results_dir)
% default values
if exist('root_dir') == 0 || exist('results_dir') == 0
    root_dir = '/home/jcs/code/svn/multicamera/wise-mnet/dev/wise/simulations/wiseCameraCAWcamTrack/';
    results_dir = 'res_P_t09_7fps_25s_r50_o1';
end